
queue_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006204  08006204  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800620c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004abc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b30  20004b30  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e5d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000322f  00000000  00000000  00038f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0003d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004180  00000000  00000000  0003e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013260  00000000  00000000  00042608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a72  00000000  00000000  00055868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a2da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055f0  00000000  00000000  0012a330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006028 	.word	0x08006028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006028 	.word	0x08006028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc9d 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f851 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8b9 	bl	80006ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(task1, "TASK-1", 500, NULL, 2, &task1_Handle);
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0x84>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000588:	4919      	ldr	r1, [pc, #100]	; (80005f0 <main+0x88>)
 800058a:	481a      	ldr	r0, [pc, #104]	; (80005f4 <main+0x8c>)
 800058c:	f002 fe4f 	bl	800322e <xTaskCreate>
  xTaskCreate(task2, "TASK-2", 500, NULL, 2, &task2_Handle);
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x90>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800059e:	4917      	ldr	r1, [pc, #92]	; (80005fc <main+0x94>)
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x98>)
 80005a2:	f002 fe44 	bl	800322e <xTaskCreate>
  queue1=xQueueCreate(10,sizeof(uint32_t));
 80005a6:	2200      	movs	r2, #0
 80005a8:	2104      	movs	r1, #4
 80005aa:	200a      	movs	r0, #10
 80005ac:	f002 f99c 	bl	80028e8 <xQueueGenericCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <main+0x9c>)
 80005b4:	6013      	str	r3, [r2, #0]

  state.task1_State=0;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <main+0xa0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
  state.task1_State=0;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0xa0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
  state.inQueue1=0;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <main+0xa0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  state.inQueue2=0;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0xa0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]

  vTaskStartScheduler();
 80005ce:	f002 ffbd 	bl	800354c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d2:	f001 fec9 	bl	8002368 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <main+0xa4>)
 80005d8:	2100      	movs	r1, #0
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0xa8>)
 80005dc:	f001 ff0e 	bl	80023fc <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <main+0xac>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f001 fee3 	bl	80023b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x82>
 80005ec:	20004a8c 	.word	0x20004a8c
 80005f0:	0800604c 	.word	0x0800604c
 80005f4:	080009a9 	.word	0x080009a9
 80005f8:	20004a78 	.word	0x20004a78
 80005fc:	08006054 	.word	0x08006054
 8000600:	08000a31 	.word	0x08000a31
 8000604:	20004a90 	.word	0x20004a90
 8000608:	20004a7c 	.word	0x20004a7c
 800060c:	08006074 	.word	0x08006074
 8000610:	08000b1d 	.word	0x08000b1d
 8000614:	20004a74 	.word	0x20004a74

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fd81 	bl	800512e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800068c:	2332      	movs	r3, #50	; 0x32
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000690:	2304      	movs	r3, #4
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fedf 	bl	8001460 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fa52 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f940 	bl	8001950 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 fa3b 	bl	8000b50 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4ba2      	ldr	r3, [pc, #648]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4aa1      	ldr	r2, [pc, #644]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b9f      	ldr	r3, [pc, #636]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b9b      	ldr	r3, [pc, #620]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a9a      	ldr	r2, [pc, #616]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b98      	ldr	r3, [pc, #608]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b94      	ldr	r3, [pc, #592]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a93      	ldr	r2, [pc, #588]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b91      	ldr	r3, [pc, #580]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a8c      	ldr	r2, [pc, #560]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b86      	ldr	r3, [pc, #536]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a85      	ldr	r2, [pc, #532]	; (8000990 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b83      	ldr	r3, [pc, #524]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b7f      	ldr	r3, [pc, #508]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4879      	ldr	r0, [pc, #484]	; (8000994 <MX_GPIO_Init+0x2a8>)
 80007b0:	f000 fe3c 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	4877      	ldr	r0, [pc, #476]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80007ba:	f000 fe37 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c4:	4875      	ldr	r0, [pc, #468]	; (800099c <MX_GPIO_Init+0x2b0>)
 80007c6:	f000 fe31 	bl	800142c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	486c      	ldr	r0, [pc, #432]	; (8000994 <MX_GPIO_Init+0x2a8>)
 80007e2:	f000 fc87 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4866      	ldr	r0, [pc, #408]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80007fe:	f000 fc79 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000812:	2305      	movs	r3, #5
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	485e      	ldr	r0, [pc, #376]	; (8000998 <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fc69 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	485a      	ldr	r0, [pc, #360]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000838:	f000 fc5c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800083c:	2310      	movs	r3, #16
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800084c:	2306      	movs	r3, #6
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4852      	ldr	r0, [pc, #328]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000858:	f000 fc4c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800085c:	23e0      	movs	r3, #224	; 0xe0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086c:	2305      	movs	r3, #5
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	484a      	ldr	r0, [pc, #296]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 8000878:	f000 fc3c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4845      	ldr	r0, [pc, #276]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 8000890:	f000 fc30 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 80008b2:	f000 fc1f 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4833      	ldr	r0, [pc, #204]	; (800099c <MX_GPIO_Init+0x2b0>)
 80008d0:	f000 fc10 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e6:	2306      	movs	r3, #6
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4829      	ldr	r0, [pc, #164]	; (8000998 <MX_GPIO_Init+0x2ac>)
 80008f2:	f000 fbff 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800090c:	f000 fbf2 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000910:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000922:	230a      	movs	r3, #10
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x2b4>)
 800092e:	f000 fbe1 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_GPIO_Init+0x2b0>)
 8000946:	f000 fbd5 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x2b8>)
 8000968:	f000 fbc4 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x2a8>)
 8000982:	f000 fbb7 	bl	80010f4 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <task1>:

/* USER CODE BEGIN 4 */
void task1(void* params){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	next_val=rand()%100;
 80009b0:	f004 fc20 	bl	80051f4 <rand>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <task1+0x78>)
 80009b8:	fb83 1302 	smull	r1, r3, r3, r2
 80009bc:	1159      	asrs	r1, r3, #5
 80009be:	17d3      	asrs	r3, r2, #31
 80009c0:	1acb      	subs	r3, r1, r3
 80009c2:	2164      	movs	r1, #100	; 0x64
 80009c4:	fb01 f303 	mul.w	r3, r1, r3
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <task1+0x7c>)
 80009cc:	6013      	str	r3, [r2, #0]

	for(;;){
		state.task1_State++;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <task1+0x80>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <task1+0x80>)
 80009d6:	6013      	str	r3, [r2, #0]
		if(xQueueSend(queue1,&next_val,0) == pdPASS){
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <task1+0x84>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2200      	movs	r2, #0
 80009e0:	4910      	ldr	r1, [pc, #64]	; (8000a24 <task1+0x7c>)
 80009e2:	f001 ffdf 	bl	80029a4 <xQueueGenericSend>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d1f0      	bne.n	80009ce <task1+0x26>
			state.inQueue1++;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <task1+0x80>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <task1+0x80>)
 80009f4:	6093      	str	r3, [r2, #8]
			next_val=rand()%100;
 80009f6:	f004 fbfd 	bl	80051f4 <rand>
 80009fa:	4602      	mov	r2, r0
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <task1+0x78>)
 80009fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000a02:	1159      	asrs	r1, r3, #5
 8000a04:	17d3      	asrs	r3, r2, #31
 8000a06:	1acb      	subs	r3, r1, r3
 8000a08:	2164      	movs	r1, #100	; 0x64
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <task1+0x7c>)
 8000a12:	6013      	str	r3, [r2, #0]
		vTaskDelay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a18:	f002 fd64 	bl	80034e4 <vTaskDelay>
		state.task1_State++;
 8000a1c:	e7d7      	b.n	80009ce <task1+0x26>
 8000a1e:	bf00      	nop
 8000a20:	51eb851f 	.word	0x51eb851f
 8000a24:	20000094 	.word	0x20000094
 8000a28:	20004a7c 	.word	0x20004a7c
 8000a2c:	20004a90 	.word	0x20004a90

08000a30 <task2>:
		}
	}

}

void task2 (void* params){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]


	for(;;){
		state.task2_State++;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <task2+0xa0>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <task2+0xa0>)
 8000a40:	6053      	str	r3, [r2, #4]
		if(xQueueReceive(queue1, &received_val, portMAX_DELAY)==pdPASS){
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <task2+0xa4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	4923      	ldr	r1, [pc, #140]	; (8000ad8 <task2+0xa8>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f943 	bl	8002cd8 <xQueueReceive>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d139      	bne.n	8000acc <task2+0x9c>
			state.inQueue2++;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <task2+0xa0>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <task2+0xa0>)
 8000a60:	60d3      	str	r3, [r2, #12]
			reset_all_leds();
 8000a62:	f000 f83d 	bl	8000ae0 <reset_all_leds>
			switch (received_val%4){
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <task2+0xa8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	425a      	negs	r2, r3
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	bf58      	it	pl
 8000a76:	4253      	negpl	r3, r2
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d8dd      	bhi.n	8000a38 <task2+0x8>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <task2+0x54>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000a95 	.word	0x08000a95
 8000a88:	08000aa3 	.word	0x08000aa3
 8000a8c:	08000ab1 	.word	0x08000ab1
 8000a90:	08000abf 	.word	0x08000abf
			case 0 : HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); break;
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <task2+0xac>)
 8000a9c:	f000 fcc6 	bl	800142c <HAL_GPIO_WritePin>
 8000aa0:	e015      	b.n	8000ace <task2+0x9e>
			case 1 : HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); break;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <task2+0xac>)
 8000aaa:	f000 fcbf 	bl	800142c <HAL_GPIO_WritePin>
 8000aae:	e00e      	b.n	8000ace <task2+0x9e>
			case 2 : HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); break;
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <task2+0xac>)
 8000ab8:	f000 fcb8 	bl	800142c <HAL_GPIO_WritePin>
 8000abc:	e007      	b.n	8000ace <task2+0x9e>
			case 3 : HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); break;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <task2+0xac>)
 8000ac6:	f000 fcb1 	bl	800142c <HAL_GPIO_WritePin>
 8000aca:	e000      	b.n	8000ace <task2+0x9e>


			}
			//vTaskDelay(500);
		}
 8000acc:	bf00      	nop
		state.task2_State++;
 8000ace:	e7b3      	b.n	8000a38 <task2+0x8>
 8000ad0:	20004a7c 	.word	0x20004a7c
 8000ad4:	20004a90 	.word	0x20004a90
 8000ad8:	20000090 	.word	0x20000090
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <reset_all_leds>:
	}
}

void reset_all_leds(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <reset_all_leds+0x38>)
 8000aec:	f000 fc9e 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <reset_all_leds+0x38>)
 8000af8:	f000 fc98 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <reset_all_leds+0x38>)
 8000b04:	f000 fc92 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	4802      	ldr	r0, [pc, #8]	; (8000b18 <reset_all_leds+0x38>)
 8000b10:	f000 fc8c 	bl	800142c <HAL_GPIO_WritePin>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f001 fcfb 	bl	8002520 <osDelay>
 8000b2a:	e7fb      	b.n	8000b24 <StartDefaultTask+0x8>

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 f9d7 	bl	8000ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40001000 	.word	0x40001000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	f06f 0001 	mvn.w	r0, #1
 8000ba2:	f000 fa7d 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2036      	movs	r0, #54	; 0x36
 8000bca:	f000 fa69 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bce:	2036      	movs	r0, #54	; 0x36
 8000bd0:	f000 fa82 	bl	80010d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_InitTick+0xa4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <HAL_InitTick+0xa4>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_InitTick+0xa4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 0210 	add.w	r2, r7, #16
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f890 	bl	8001d20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c00:	f001 f87a 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000c04:	4603      	mov	r3, r0
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_InitTick+0xa8>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	3b01      	subs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_InitTick+0xac>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_InitTick+0xb0>)
 8000c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_InitTick+0xac>)
 8000c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_InitTick+0xac>)
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_InitTick+0xac>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_InitTick+0xac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <HAL_InitTick+0xac>)
 8000c3a:	f001 f8a3 	bl	8001d84 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d104      	bne.n	8000c4e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <HAL_InitTick+0xac>)
 8000c46:	f001 f8f7 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3730      	adds	r7, #48	; 0x30
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	20004a94 	.word	0x20004a94
 8000c64:	40001000 	.word	0x40001000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM6_DAC_IRQHandler+0x10>)
 8000c9a:	f001 f93d 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20004a94 	.word	0x20004a94

08000ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_kill>:

int _kill(int pid, int sig)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cc2:	f004 f903 	bl	8004ecc <__errno>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2216      	movs	r2, #22
 8000cca:	601a      	str	r2, [r3, #0]
	return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_exit>:

void _exit (int status)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe7 	bl	8000cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cea:	e7fe      	b.n	8000cea <_exit+0x12>

08000cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
	}

return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
	}
	return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f004 f868 	bl	8004ecc <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20020000 	.word	0x20020000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000098 	.word	0x20000098
 8000e30:	20004b30 	.word	0x20004b30

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 f91d 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb6d 	bl	8000568 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e9c:	0800620c 	.word	0x0800620c
  ldr r2, =_sbss
 8000ea0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ea4:	20004b30 	.word	0x20004b30

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f8d8 	bl	800108a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff fe6a 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe3c 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20004adc 	.word	0x20004adc

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20004adc 	.word	0x20004adc

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff4c 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff61 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb1 	bl	8001024 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff54 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e16b      	b.n	80013e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 815a 	bne.w	80013e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b4 	beq.w	80013e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x310>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x324>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x20a>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00e      	b.n	800131c <HAL_GPIO_Init+0x228>
 80012fe:	2308      	movs	r3, #8
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001302:	2306      	movs	r3, #6
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x228>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x310>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x334>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae90 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40021400 	.word	0x40021400
 8001420:	40021800 	.word	0x40021800
 8001424:	40021c00 	.word	0x40021c00
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e264      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	4ba3      	ldr	r3, [pc, #652]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b99      	ldr	r3, [pc, #612]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e23f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x74>
 80014c6:	4b91      	ldr	r3, [pc, #580]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a90      	ldr	r2, [pc, #576]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a83      	ldr	r2, [pc, #524]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a80      	ldr	r2, [pc, #512]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcfe 	bl	8000f18 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcfa 	bl	8000f18 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e204      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xc0>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fcea 	bl	8000f18 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fce6 	bl	8000f18 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1f0      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0xe8>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c4      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4952      	ldr	r1, [pc, #328]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc9f 	bl	8000f18 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc9b 	bl	8000f18 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4940      	ldr	r1, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc7e 	bl	8000f18 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc7a 	bl	8000f18 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e184      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d030      	beq.n	80016ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d016      	beq.n	8001680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fc5e 	bl	8000f18 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc5a 	bl	8000f18 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e164      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x200>
 800167e:	e015      	b.n	80016ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fc47 	bl	8000f18 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fc43 	bl	8000f18 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e14d      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a0 	beq.w	80017fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d121      	bne.n	800173a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fc09 	bl	8000f18 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e011      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
 8001718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff fbfc 	bl	8000f18 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e106      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x4e4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a80      	ldr	r2, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fbc1 	bl	8000f18 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fbbd 	bl	8000f18 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0c5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x33a>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fbab 	bl	8000f18 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fba7 	bl	8000f18 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0af      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 809b 	beq.w	800193a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d05c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d141      	bne.n	800189c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb7b 	bl	8000f18 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fb77 	bl	8000f18 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e081      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	061b      	lsls	r3, r3, #24
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb50 	bl	8000f18 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb4c 	bl	8000f18 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e056      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x41c>
 800189a:	e04e      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb39 	bl	8000f18 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fb35 	bl	8000f18 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x44a>
 80018c8:	e037      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e032      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d028      	beq.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d11a      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190e:	4293      	cmp	r3, r2
 8001910:	d111      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40007000 	.word	0x40007000
 8001948:	40023800 	.word	0x40023800
 800194c:	42470060 	.word	0x42470060

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa6a 	bl	8000f18 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fa66 	bl	8000f18 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f85c 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08006098 	.word	0x08006098
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d00d      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f200 80bd 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b52:	60bb      	str	r3, [r7, #8]
       break;
 8001b54:	e0b7      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b58:	60bb      	str	r3, [r7, #8]
      break;
 8001b5a:	e0b4      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d04d      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	ea02 0800 	and.w	r8, r2, r0
 8001b8a:	ea03 0901 	and.w	r9, r3, r1
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4649      	mov	r1, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	ebb0 0008 	subs.w	r0, r0, r8
 8001baa:	eb61 0109 	sbc.w	r1, r1, r9
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bbc:	0182      	lsls	r2, r0, #6
 8001bbe:	1a12      	subs	r2, r2, r0
 8001bc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	00d9      	lsls	r1, r3, #3
 8001bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd2:	00d0      	lsls	r0, r2, #3
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	eb12 0208 	adds.w	r2, r2, r8
 8001bdc:	eb43 0309 	adc.w	r3, r3, r9
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0259      	lsls	r1, r3, #9
 8001bea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bee:	0250      	lsls	r0, r2, #9
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f7fe fb36 	bl	8000270 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e04a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	ea02 0400 	and.w	r4, r2, r0
 8001c26:	ea03 0501 	and.w	r5, r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	014b      	lsls	r3, r1, #5
 8001c38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c3c:	0142      	lsls	r2, r0, #5
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	1b00      	subs	r0, r0, r4
 8001c44:	eb61 0105 	sbc.w	r1, r1, r5
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c56:	0182      	lsls	r2, r0, #6
 8001c58:	1a12      	subs	r2, r2, r0
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	00d9      	lsls	r1, r3, #3
 8001c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6c:	00d0      	lsls	r0, r2, #3
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	1912      	adds	r2, r2, r4
 8001c74:	eb45 0303 	adc.w	r3, r5, r3
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0299      	lsls	r1, r3, #10
 8001c82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c86:	0290      	lsls	r0, r2, #10
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f7fe faea 	bl	8000270 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cc2:	60bb      	str	r3, [r7, #8]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	080060a8 	.word	0x080060a8

08001d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCC_GetClockConfig+0x60>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9d8 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0202 	mvn.w	r2, #2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8ee 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8e0 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8f1 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8c4 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8b6 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8c7 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0208 	mvn.w	r2, #8
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f89a 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f88c 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f89d 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b10      	cmp	r3, #16
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f870 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f862 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f873 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fd48 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f902 	bl	80022cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f838 	bl	8002164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0220 	mvn.w	r2, #32
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8cc 	bl	80022b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <TIM_Base_SetConfig+0x114>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <TIM_Base_SetConfig+0x118>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <TIM_Base_SetConfig+0x114>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d027      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <TIM_Base_SetConfig+0x118>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d023      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <TIM_Base_SetConfig+0x128>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <TIM_Base_SetConfig+0x12c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <TIM_Base_SetConfig+0x130>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <TIM_Base_SetConfig+0x134>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <TIM_Base_SetConfig+0x138>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <TIM_Base_SetConfig+0x13c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <TIM_Base_SetConfig+0x114>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0xf8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <TIM_Base_SetConfig+0x124>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010400 	.word	0x40010400
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800
 80022ac:	40001800 	.word	0x40001800
 80022b0:	40001c00 	.word	0x40001c00
 80022b4:	40002000 	.word	0x40002000

080022b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <__NVIC_SetPriority>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Handler+0x1c>)
 800233a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800233c:	f001 fd62 	bl	8003e04 <xTaskGetSchedulerState>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002346:	f002 fb47 	bl	80049d8 <xPortSysTickHandler>
  }
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002358:	2100      	movs	r1, #0
 800235a:	f06f 0004 	mvn.w	r0, #4
 800235e:	f7ff ffbf 	bl	80022e0 <__NVIC_SetPriority>
#endif
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236e:	f3ef 8305 	mrs	r3, IPSR
 8002372:	603b      	str	r3, [r7, #0]
  return(result);
 8002374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800237a:	f06f 0305 	mvn.w	r3, #5
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e00c      	b.n	800239c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <osKernelInitialize+0x44>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <osKernelInitialize+0x44>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	e002      	b.n	800239c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000009c 	.word	0x2000009c

080023b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b6:	f3ef 8305 	mrs	r3, IPSR
 80023ba:	603b      	str	r3, [r7, #0]
  return(result);
 80023bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80023c2:	f06f 0305 	mvn.w	r3, #5
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	e010      	b.n	80023ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <osKernelStart+0x48>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d109      	bne.n	80023e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023d2:	f7ff ffbf 	bl	8002354 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <osKernelStart+0x48>)
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023dc:	f001 f8b6 	bl	800354c <vTaskStartScheduler>
      stat = osOK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	e002      	b.n	80023ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000009c 	.word	0x2000009c

080023fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af04      	add	r7, sp, #16
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800240c:	f3ef 8305 	mrs	r3, IPSR
 8002410:	617b      	str	r3, [r7, #20]
  return(result);
 8002412:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002414:	2b00      	cmp	r3, #0
 8002416:	d17e      	bne.n	8002516 <osThreadNew+0x11a>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d07b      	beq.n	8002516 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002422:	2318      	movs	r3, #24
 8002424:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d045      	beq.n	80024c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <osThreadNew+0x48>
        name = attr->name;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <osThreadNew+0x6e>
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b38      	cmp	r3, #56	; 0x38
 800245c:	d805      	bhi.n	800246a <osThreadNew+0x6e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <osThreadNew+0x72>
        return (NULL);
 800246a:	2300      	movs	r3, #0
 800246c:	e054      	b.n	8002518 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <osThreadNew+0xa8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2bbb      	cmp	r3, #187	; 0xbb
 800248c:	d90a      	bls.n	80024a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <osThreadNew+0xa8>
        mem = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	e010      	b.n	80024c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10c      	bne.n	80024c6 <osThreadNew+0xca>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <osThreadNew+0xca>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d104      	bne.n	80024c6 <osThreadNew+0xca>
          mem = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e001      	b.n	80024c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d110      	bne.n	80024ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024d4:	9202      	str	r2, [sp, #8]
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fe46 	bl	8003174 <xTaskCreateStatic>
 80024e8:	4603      	mov	r3, r0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e013      	b.n	8002516 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d110      	bne.n	8002516 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fe91 	bl	800322e <xTaskCreate>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <osThreadNew+0x11a>
            hTask = NULL;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002528:	f3ef 8305 	mrs	r3, IPSR
 800252c:	60bb      	str	r3, [r7, #8]
  return(result);
 800252e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <osDelay+0x1c>
    stat = osErrorISR;
 8002534:	f06f 0305 	mvn.w	r3, #5
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e007      	b.n	800254c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 ffcc 	bl	80034e4 <vTaskDelay>
    }
  }

  return (stat);
 800254c:	68fb      	ldr	r3, [r7, #12]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <vApplicationGetIdleTaskMemory+0x2c>)
 8002568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <vApplicationGetIdleTaskMemory+0x30>)
 800256e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200000a0 	.word	0x200000a0
 8002588:	2000015c 	.word	0x2000015c

0800258c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800259c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <vApplicationGetTimerTaskMemory+0x30>)
 80025a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	2000035c 	.word	0x2000035c
 80025bc:	20000418 	.word	0x20000418

080025c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0208 	add.w	r2, r3, #8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0208 	add.w	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0208 	add.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d103      	bne.n	8002682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e00c      	b.n	800269c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3308      	adds	r3, #8
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <vListInsert+0x2e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d2f6      	bcs.n	800268a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6852      	ldr	r2, [r2, #4]
 80026f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d103      	bne.n	8002708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002752:	f002 f8af 	bl	80048b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	441a      	add	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	3b01      	subs	r3, #1
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	441a      	add	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01a      	beq.n	80027e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3310      	adds	r3, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f963 	bl	8003a80 <xTaskRemoveFromEventList>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d012      	beq.n	80027e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <xQueueGenericReset+0xcc>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	e009      	b.n	80027e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3310      	adds	r3, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fef2 	bl	80025c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff feed 	bl	80025c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027e6:	f002 f895 	bl	8004914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <xQueueGenericCreateStatic+0x52>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <xQueueGenericCreateStatic+0x56>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericCreateStatic+0x58>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <xQueueGenericCreateStatic+0x7e>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <xQueueGenericCreateStatic+0x82>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <xQueueGenericCreateStatic+0x84>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	61fb      	str	r3, [r7, #28]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002896:	2350      	movs	r3, #80	; 0x50
 8002898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d00a      	beq.n	80028b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61bb      	str	r3, [r7, #24]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f83f 	bl	800295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	613b      	str	r3, [r7, #16]
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3350      	adds	r3, #80	; 0x50
 8002920:	4618      	mov	r0, r3
 8002922:	f002 f8e9 	bl	8004af8 <pvPortMalloc>
 8002926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d011      	beq.n	8002952 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f805 	bl	800295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002952:	69bb      	ldr	r3, [r7, #24]
	}
 8002954:	4618      	mov	r0, r3
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e002      	b.n	800297e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800298a:	2101      	movs	r1, #1
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f7ff fecb 	bl	8002728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueueGenericSend+0x32>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <xQueueGenericSend+0x40>
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <xQueueGenericSend+0x44>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <xQueueGenericSend+0x46>
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <xQueueGenericSend+0x60>
	__asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSend+0x6e>
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <xQueueGenericSend+0x72>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueGenericSend+0x74>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	623b      	str	r3, [r7, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a32:	f001 f9e7 	bl	8003e04 <xTaskGetSchedulerState>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <xQueueGenericSend+0x9e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <xQueueGenericSend+0xa2>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueGenericSend+0xa4>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	61fb      	str	r3, [r7, #28]
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a62:	f001 ff27 	bl	80048b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <xQueueGenericSend+0xd4>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d129      	bne.n	8002acc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a7e:	f000 fa0b 	bl	8002e98 <prvCopyDataToQueue>
 8002a82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	3324      	adds	r3, #36	; 0x24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fff5 	bl	8003a80 <xTaskRemoveFromEventList>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <xQueueGenericSend+0x1f8>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	e00a      	b.n	8002ac4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <xQueueGenericSend+0x1f8>)
 8002ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ac4:	f001 ff26 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e063      	b.n	8002b94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ad2:	f001 ff1f 	bl	8004914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e05c      	b.n	8002b94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 f82f 	bl	8003b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aee:	f001 ff11 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002af2:	f000 fd9b 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002af6:	f001 fedd 	bl	80048b4 <vPortEnterCritical>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d103      	bne.n	8002b10 <xQueueGenericSend+0x16c>
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <xQueueGenericSend+0x182>
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b26:	f001 fef5 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b2a:	1d3a      	adds	r2, r7, #4
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 f81e 	bl	8003b74 <xTaskCheckForTimeOut>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d124      	bne.n	8002b88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b40:	f000 faa2 	bl	8003088 <prvIsQueueFull>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 ff44 	bl	80039e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5a:	f000 fa2d 	bl	8002fb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b5e:	f000 fd73 	bl	8003648 <xTaskResumeAll>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af7c 	bne.w	8002a62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <xQueueGenericSend+0x1f8>)
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	e772      	b.n	8002a62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fa1b 	bl	8002fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b82:	f000 fd61 	bl	8003648 <xTaskResumeAll>
 8002b86:	e76c      	b.n	8002a62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8a:	f000 fa15 	bl	8002fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b8e:	f000 fd5b 	bl	8003648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3738      	adds	r7, #56	; 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b090      	sub	sp, #64	; 0x40
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <xQueueGenericSendFromISR+0x3c>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <xQueueGenericSendFromISR+0x40>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <xQueueGenericSendFromISR+0x42>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d103      	bne.n	8002c0a <xQueueGenericSendFromISR+0x6a>
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <xQueueGenericSendFromISR+0x6e>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueGenericSendFromISR+0x70>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	623b      	str	r3, [r7, #32]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c2a:	f001 ff25 	bl	8004a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	61fa      	str	r2, [r7, #28]
 8002c44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d302      	bcc.n	8002c5c <xQueueGenericSendFromISR+0xbc>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d12f      	bne.n	8002cbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c72:	f000 f911 	bl	8002e98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d112      	bne.n	8002ca6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	3324      	adds	r3, #36	; 0x24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fef7 	bl	8003a80 <xTaskRemoveFromEventList>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e007      	b.n	8002cb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002caa:	3301      	adds	r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	b25a      	sxtb	r2, r3
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002cba:	e001      	b.n	8002cc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3740      	adds	r7, #64	; 0x40
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <xQueueReceive+0x30>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	623b      	str	r3, [r7, #32]
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <xQueueReceive+0x3e>
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <xQueueReceive+0x42>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <xQueueReceive+0x44>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xQueueReceive+0x5e>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	61fb      	str	r3, [r7, #28]
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d36:	f001 f865 	bl	8003e04 <xTaskGetSchedulerState>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <xQueueReceive+0x6e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <xQueueReceive+0x72>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueReceive+0x74>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueReceive+0x8e>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	61bb      	str	r3, [r7, #24]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d66:	f001 fda5 	bl	80048b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01f      	beq.n	8002db6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7a:	f000 f8f7 	bl	8002f6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00f      	beq.n	8002dae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	3310      	adds	r3, #16
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fe74 	bl	8003a80 <xTaskRemoveFromEventList>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <xQueueReceive+0x1bc>)
 8002da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dae:	f001 fdb1 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e069      	b.n	8002e8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dbc:	f001 fdaa 	bl	8004914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e062      	b.n	8002e8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 feba 	bl	8003b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dd8:	f001 fd9c 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ddc:	f000 fc26 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002de0:	f001 fd68 	bl	80048b4 <vPortEnterCritical>
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d103      	bne.n	8002dfa <xQueueReceive+0x122>
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d103      	bne.n	8002e10 <xQueueReceive+0x138>
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e10:	f001 fd80 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e14:	1d3a      	adds	r2, r7, #4
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fea9 	bl	8003b74 <xTaskCheckForTimeOut>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d123      	bne.n	8002e70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2a:	f000 f917 	bl	800305c <prvIsQueueEmpty>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	3324      	adds	r3, #36	; 0x24
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fdcf 	bl	80039e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e44:	f000 f8b8 	bl	8002fb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e48:	f000 fbfe 	bl	8003648 <xTaskResumeAll>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d189      	bne.n	8002d66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <xQueueReceive+0x1bc>)
 8002e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	e780      	b.n	8002d66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e66:	f000 f8a7 	bl	8002fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e6a:	f000 fbed 	bl	8003648 <xTaskResumeAll>
 8002e6e:	e77a      	b.n	8002d66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e72:	f000 f8a1 	bl	8002fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e76:	f000 fbe7 	bl	8003648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7c:	f000 f8ee 	bl	800305c <prvIsQueueEmpty>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f43f af6f 	beq.w	8002d66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3730      	adds	r7, #48	; 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d14d      	bne.n	8002f5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 ffbc 	bl	8003e40 <xTaskPriorityDisinherit>
 8002ec8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e043      	b.n	8002f5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d119      	bne.n	8002f0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6858      	ldr	r0, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	f002 f915 	bl	8005112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	441a      	add	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d32b      	bcc.n	8002f5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e026      	b.n	8002f5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68d8      	ldr	r0, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	461a      	mov	r2, r3
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	f002 f8fb 	bl	8005112 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	425b      	negs	r3, r3
 8002f26:	441a      	add	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d207      	bcs.n	8002f48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	425b      	negs	r3, r3
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d105      	bne.n	8002f5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f62:	697b      	ldr	r3, [r7, #20]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d303      	bcc.n	8002fa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68d9      	ldr	r1, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f002 f8b1 	bl	8005112 <memcpy>
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fc0:	f001 fc78 	bl	80048b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fcc:	e011      	b.n	8002ff2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3324      	adds	r3, #36	; 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fd50 	bl	8003a80 <xTaskRemoveFromEventList>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fe6:	f000 fe27 	bl	8003c38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	dce9      	bgt.n	8002fce <prvUnlockQueue+0x16>
 8002ffa:	e000      	b.n	8002ffe <prvUnlockQueue+0x46>
					break;
 8002ffc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003006:	f001 fc85 	bl	8004914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800300a:	f001 fc53 	bl	80048b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003014:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003016:	e011      	b.n	800303c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3310      	adds	r3, #16
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fd2b 	bl	8003a80 <xTaskRemoveFromEventList>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003030:	f000 fe02 	bl	8003c38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003034:	7bbb      	ldrb	r3, [r7, #14]
 8003036:	3b01      	subs	r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800303c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003040:	2b00      	cmp	r3, #0
 8003042:	dce9      	bgt.n	8003018 <prvUnlockQueue+0x60>
 8003044:	e000      	b.n	8003048 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003046:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	22ff      	movs	r2, #255	; 0xff
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003050:	f001 fc60 	bl	8004914 <vPortExitCritical>
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003064:	f001 fc26 	bl	80048b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e001      	b.n	800307a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800307a:	f001 fc4b 	bl	8004914 <vPortExitCritical>

	return xReturn;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003090:	f001 fc10 	bl	80048b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	429a      	cmp	r2, r3
 800309e:	d102      	bne.n	80030a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e001      	b.n	80030aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030aa:	f001 fc33 	bl	8004914 <vPortExitCritical>

	return xReturn;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e014      	b.n	80030f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030c8:	4a0f      	ldr	r2, [pc, #60]	; (8003108 <vQueueAddToRegistry+0x50>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <vQueueAddToRegistry+0x50>)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <vQueueAddToRegistry+0x50>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030ea:	e006      	b.n	80030fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d9e7      	bls.n	80030c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20004ae0 	.word	0x20004ae0

0800310c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800311c:	f001 fbca 	bl	80048b4 <vPortEnterCritical>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003126:	b25b      	sxtb	r3, r3
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d103      	bne.n	8003136 <vQueueWaitForMessageRestricted+0x2a>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800313c:	b25b      	sxtb	r3, r3
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d103      	bne.n	800314c <vQueueWaitForMessageRestricted+0x40>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800314c:	f001 fbe2 	bl	8004914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fc61 	bl	8003a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff26 	bl	8002fb8 <prvUnlockQueue>
	}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08e      	sub	sp, #56	; 0x38
 8003178:	af04      	add	r7, sp, #16
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	623b      	str	r3, [r7, #32]
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xTaskCreateStatic+0x46>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61fb      	str	r3, [r7, #28]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031ba:	23bc      	movs	r3, #188	; 0xbc
 80031bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2bbc      	cmp	r3, #188	; 0xbc
 80031c2:	d00a      	beq.n	80031da <xTaskCreateStatic+0x66>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61bb      	str	r3, [r7, #24]
}
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01e      	beq.n	8003220 <xTaskCreateStatic+0xac>
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031fa:	2300      	movs	r3, #0
 80031fc:	9303      	str	r3, [sp, #12]
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	9302      	str	r3, [sp, #8]
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f850 	bl	80032b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321a:	f000 f8f3 	bl	8003404 <prvAddNewTaskToReadyList>
 800321e:	e001      	b.n	8003224 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003224:	697b      	ldr	r3, [r7, #20]
	}
 8003226:	4618      	mov	r0, r3
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08c      	sub	sp, #48	; 0x30
 8003232:	af04      	add	r7, sp, #16
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f001 fc58 	bl	8004af8 <pvPortMalloc>
 8003248:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003250:	20bc      	movs	r0, #188	; 0xbc
 8003252:	f001 fc51 	bl	8004af8 <pvPortMalloc>
 8003256:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
 8003264:	e005      	b.n	8003272 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f001 fd12 	bl	8004c90 <vPortFree>
 800326c:	e001      	b.n	8003272 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d017      	beq.n	80032a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	2300      	movs	r3, #0
 8003284:	9303      	str	r3, [sp, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f80e 	bl	80032b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329c:	69f8      	ldr	r0, [r7, #28]
 800329e:	f000 f8b1 	bl	8003404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e002      	b.n	80032ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032ae:	69bb      	ldr	r3, [r7, #24]
	}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	21a5      	movs	r1, #165	; 0xa5
 80032d2:	f001 ff2c 	bl	800512e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032e0:	3b01      	subs	r3, #1
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f023 0307 	bic.w	r3, r3, #7
 80032ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	617b      	str	r3, [r7, #20]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01f      	beq.n	8003356 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e012      	b.n	8003342 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	7819      	ldrb	r1, [r3, #0]
 8003324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	3334      	adds	r3, #52	; 0x34
 800332c:	460a      	mov	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d9e9      	bls.n	800331c <prvInitialiseNewTask+0x64>
 8003348:	e000      	b.n	800334c <prvInitialiseNewTask+0x94>
			{
				break;
 800334a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003354:	e003      	b.n	800335e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	2b37      	cmp	r3, #55	; 0x37
 8003362:	d901      	bls.n	8003368 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003364:	2337      	movs	r3, #55	; 0x37
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003372:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2200      	movs	r2, #0
 8003378:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f93e 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	3318      	adds	r3, #24
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f939 	bl	8002600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	3354      	adds	r3, #84	; 0x54
 80033b8:	2260      	movs	r2, #96	; 0x60
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 feb6 	bl	800512e <memset>
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <prvInitialiseNewTask+0x140>)
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <prvInitialiseNewTask+0x144>)
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <prvInitialiseNewTask+0x148>)
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	69b8      	ldr	r0, [r7, #24]
 80033da:	f001 f941 	bl	8004660 <pxPortInitialiseStack>
 80033de:	4602      	mov	r2, r0
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	080060d0 	.word	0x080060d0
 80033fc:	080060f0 	.word	0x080060f0
 8003400:	080060b0 	.word	0x080060b0

08003404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800340c:	f001 fa52 	bl	80048b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <prvAddNewTaskToReadyList+0xc4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <prvAddNewTaskToReadyList+0xc4>)
 8003418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <prvAddNewTaskToReadyList+0xc8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003422:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <prvAddNewTaskToReadyList+0xc8>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <prvAddNewTaskToReadyList+0xc4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d110      	bne.n	8003452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003430:	f000 fc26 	bl	8003c80 <prvInitialiseTaskLists>
 8003434:	e00d      	b.n	8003452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <prvAddNewTaskToReadyList+0xcc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <prvAddNewTaskToReadyList+0xc8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	429a      	cmp	r2, r3
 800344a:	d802      	bhi.n	8003452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <prvAddNewTaskToReadyList+0xc8>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <prvAddNewTaskToReadyList+0xd0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <prvAddNewTaskToReadyList+0xd0>)
 800345a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <prvAddNewTaskToReadyList+0xd0>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <prvAddNewTaskToReadyList+0xd4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d903      	bls.n	8003478 <prvAddNewTaskToReadyList+0x74>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <prvAddNewTaskToReadyList+0xd4>)
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <prvAddNewTaskToReadyList+0xd8>)
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7ff f8c3 	bl	800261a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003494:	f001 fa3e 	bl	8004914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <prvAddNewTaskToReadyList+0xcc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <prvAddNewTaskToReadyList+0xc8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d207      	bcs.n	80034be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <prvAddNewTaskToReadyList+0xdc>)
 80034b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000cec 	.word	0x20000cec
 80034cc:	20000818 	.word	0x20000818
 80034d0:	20000cf8 	.word	0x20000cf8
 80034d4:	20000d08 	.word	0x20000d08
 80034d8:	20000cf4 	.word	0x20000cf4
 80034dc:	2000081c 	.word	0x2000081c
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <vTaskDelay+0x60>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <vTaskDelay+0x30>
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60bb      	str	r3, [r7, #8]
}
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003514:	f000 f88a 	bl	800362c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fcfe 	bl	8003f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003520:	f000 f892 	bl	8003648 <xTaskResumeAll>
 8003524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <vTaskDelay+0x64>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000d14 	.word	0x20000d14
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800355a:	463a      	mov	r2, r7
 800355c:	1d39      	adds	r1, r7, #4
 800355e:	f107 0308 	add.w	r3, r7, #8
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fff8 	bl	8002558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	9202      	str	r2, [sp, #8]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2300      	movs	r3, #0
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	460a      	mov	r2, r1
 800357a:	4924      	ldr	r1, [pc, #144]	; (800360c <vTaskStartScheduler+0xc0>)
 800357c:	4824      	ldr	r0, [pc, #144]	; (8003610 <vTaskStartScheduler+0xc4>)
 800357e:	f7ff fdf9 	bl	8003174 <xTaskCreateStatic>
 8003582:	4603      	mov	r3, r0
 8003584:	4a23      	ldr	r2, [pc, #140]	; (8003614 <vTaskStartScheduler+0xc8>)
 8003586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <vTaskStartScheduler+0xc8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003590:	2301      	movs	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e001      	b.n	800359a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035a0:	f000 fd10 	bl	8003fc4 <xTimerCreateTimerTask>
 80035a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d11b      	bne.n	80035e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	613b      	str	r3, [r7, #16]
}
 80035be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <vTaskStartScheduler+0xcc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3354      	adds	r3, #84	; 0x54
 80035c6:	4a15      	ldr	r2, [pc, #84]	; (800361c <vTaskStartScheduler+0xd0>)
 80035c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <vTaskStartScheduler+0xd4>)
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295
 80035d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <vTaskStartScheduler+0xd8>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <vTaskStartScheduler+0xdc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035de:	f001 f8c7 	bl	8004770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035e2:	e00e      	b.n	8003602 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d10a      	bne.n	8003602 <vTaskStartScheduler+0xb6>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	60fb      	str	r3, [r7, #12]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <vTaskStartScheduler+0xb4>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	0800605c 	.word	0x0800605c
 8003610:	08003c51 	.word	0x08003c51
 8003614:	20000d10 	.word	0x20000d10
 8003618:	20000818 	.word	0x20000818
 800361c:	20000010 	.word	0x20000010
 8003620:	20000d0c 	.word	0x20000d0c
 8003624:	20000cf8 	.word	0x20000cf8
 8003628:	20000cf0 	.word	0x20000cf0

0800362c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <vTaskSuspendAll+0x18>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <vTaskSuspendAll+0x18>)
 8003638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000d14 	.word	0x20000d14

08003648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003656:	4b42      	ldr	r3, [pc, #264]	; (8003760 <xTaskResumeAll+0x118>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xTaskResumeAll+0x2c>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	603b      	str	r3, [r7, #0]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003674:	f001 f91e 	bl	80048b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <xTaskResumeAll+0x118>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <xTaskResumeAll+0x118>)
 8003680:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <xTaskResumeAll+0x118>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d162      	bne.n	8003750 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <xTaskResumeAll+0x11c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d05e      	beq.n	8003750 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003692:	e02f      	b.n	80036f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <xTaskResumeAll+0x120>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3318      	adds	r3, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f817 	bl	80026d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f812 	bl	80026d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	4b2d      	ldr	r3, [pc, #180]	; (800376c <xTaskResumeAll+0x124>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d903      	bls.n	80036c4 <xTaskResumeAll+0x7c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <xTaskResumeAll+0x124>)
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <xTaskResumeAll+0x128>)
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7fe ff9d 	bl	800261a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <xTaskResumeAll+0x12c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <xTaskResumeAll+0x130>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <xTaskResumeAll+0x120>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1cb      	bne.n	8003694 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003702:	f000 fb5f 	bl	8003dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <xTaskResumeAll+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003712:	f000 f847 	bl	80037a4 <xTaskIncrementTick>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <xTaskResumeAll+0x130>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3b01      	subs	r3, #1
 8003726:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f1      	bne.n	8003712 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <xTaskResumeAll+0x134>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <xTaskResumeAll+0x130>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <xTaskResumeAll+0x138>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003750:	f001 f8e0 	bl	8004914 <vPortExitCritical>

	return xAlreadyYielded;
 8003754:	68bb      	ldr	r3, [r7, #8]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000d14 	.word	0x20000d14
 8003764:	20000cec 	.word	0x20000cec
 8003768:	20000cac 	.word	0x20000cac
 800376c:	20000cf4 	.word	0x20000cf4
 8003770:	2000081c 	.word	0x2000081c
 8003774:	20000818 	.word	0x20000818
 8003778:	20000d00 	.word	0x20000d00
 800377c:	20000cfc 	.word	0x20000cfc
 8003780:	e000ed04 	.word	0xe000ed04

08003784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <xTaskGetTickCount+0x1c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000cf0 	.word	0x20000cf0

080037a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ae:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <xTaskIncrementTick+0x148>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 808f 	bne.w	80038d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b8:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <xTaskIncrementTick+0x14c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <xTaskIncrementTick+0x14c>)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d120      	bne.n	800380e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <xTaskIncrementTick+0x150>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <xTaskIncrementTick+0x48>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	603b      	str	r3, [r7, #0]
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <xTaskIncrementTick+0x46>
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <xTaskIncrementTick+0x150>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <xTaskIncrementTick+0x154>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <xTaskIncrementTick+0x150>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <xTaskIncrementTick+0x154>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <xTaskIncrementTick+0x158>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <xTaskIncrementTick+0x158>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	f000 fadb 	bl	8003dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800380e:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <xTaskIncrementTick+0x15c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	429a      	cmp	r2, r3
 8003816:	d349      	bcc.n	80038ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <xTaskIncrementTick+0x150>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <xTaskIncrementTick+0x15c>)
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	601a      	str	r2, [r3, #0]
					break;
 800382a:	e03f      	b.n	80038ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382c:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <xTaskIncrementTick+0x150>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d203      	bcs.n	800384c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003844:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <xTaskIncrementTick+0x15c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800384a:	e02f      	b.n	80038ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3304      	adds	r3, #4
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe ff3f 	bl	80026d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3318      	adds	r3, #24
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe ff36 	bl	80026d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <xTaskIncrementTick+0x160>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d903      	bls.n	800387c <xTaskIncrementTick+0xd8>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x160>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x164>)
 800388a:	441a      	add	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fe fec1 	bl	800261a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x168>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3b8      	bcc.n	8003818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	e7b5      	b.n	8003818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x168>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4915      	ldr	r1, [pc, #84]	; (8003908 <xTaskIncrementTick+0x164>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d901      	bls.n	80038c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x16c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e004      	b.n	80038e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <xTaskIncrementTick+0x170>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <xTaskIncrementTick+0x170>)
 80038de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000d14 	.word	0x20000d14
 80038f0:	20000cf0 	.word	0x20000cf0
 80038f4:	20000ca4 	.word	0x20000ca4
 80038f8:	20000ca8 	.word	0x20000ca8
 80038fc:	20000d04 	.word	0x20000d04
 8003900:	20000d0c 	.word	0x20000d0c
 8003904:	20000cf4 	.word	0x20000cf4
 8003908:	2000081c 	.word	0x2000081c
 800390c:	20000818 	.word	0x20000818
 8003910:	20000d00 	.word	0x20000d00
 8003914:	20000cfc 	.word	0x20000cfc

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <vTaskSwitchContext+0xb0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <vTaskSwitchContext+0xb4>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800392c:	e046      	b.n	80039bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <vTaskSwitchContext+0xb4>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <vTaskSwitchContext+0xb8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e010      	b.n	800395e <vTaskSwitchContext+0x46>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <vTaskSwitchContext+0x40>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	607b      	str	r3, [r7, #4]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <vTaskSwitchContext+0x3e>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3b01      	subs	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	491d      	ldr	r1, [pc, #116]	; (80039d4 <vTaskSwitchContext+0xbc>)
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0e4      	beq.n	800393c <vTaskSwitchContext+0x24>
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <vTaskSwitchContext+0xbc>)
 800397e:	4413      	add	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3308      	adds	r3, #8
 8003994:	429a      	cmp	r2, r3
 8003996:	d104      	bne.n	80039a2 <vTaskSwitchContext+0x8a>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <vTaskSwitchContext+0xc0>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <vTaskSwitchContext+0xb8>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <vTaskSwitchContext+0xc0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3354      	adds	r3, #84	; 0x54
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <vTaskSwitchContext+0xc4>)
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000d14 	.word	0x20000d14
 80039cc:	20000d00 	.word	0x20000d00
 80039d0:	20000cf4 	.word	0x20000cf4
 80039d4:	2000081c 	.word	0x2000081c
 80039d8:	20000818 	.word	0x20000818
 80039dc:	20000010 	.word	0x20000010

080039e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <vTaskPlaceOnEventList+0x44>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fe27 	bl	8002662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a14:	2101      	movs	r1, #1
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f000 fa80 	bl	8003f1c <prvAddCurrentTaskToDelayedList>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000818 	.word	0x20000818

08003a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	617b      	str	r3, [r7, #20]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3318      	adds	r3, #24
 8003a56:	4619      	mov	r1, r3
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7fe fdde 	bl	800261a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f000 fa55 	bl	8003f1c <prvAddCurrentTaskToDelayedList>
	}
 8003a72:	bf00      	nop
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000818 	.word	0x20000818

08003a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	60fb      	str	r3, [r7, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	e7fe      	b.n	8003aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3318      	adds	r3, #24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fe0f 	bl	80026d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <xTaskRemoveFromEventList+0xb0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d11d      	bne.n	8003afa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fe06 	bl	80026d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <xTaskRemoveFromEventList+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d903      	bls.n	8003adc <xTaskRemoveFromEventList+0x5c>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <xTaskRemoveFromEventList+0xb4>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <xTaskRemoveFromEventList+0xb8>)
 8003aea:	441a      	add	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7fe fd91 	bl	800261a <vListInsertEnd>
 8003af8:	e005      	b.n	8003b06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4619      	mov	r1, r3
 8003b00:	480e      	ldr	r0, [pc, #56]	; (8003b3c <xTaskRemoveFromEventList+0xbc>)
 8003b02:	f7fe fd8a 	bl	800261a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <xTaskRemoveFromEventList+0xc0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d905      	bls.n	8003b20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <xTaskRemoveFromEventList+0xc4>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e001      	b.n	8003b24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b24:	697b      	ldr	r3, [r7, #20]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000d14 	.word	0x20000d14
 8003b34:	20000cf4 	.word	0x20000cf4
 8003b38:	2000081c 	.word	0x2000081c
 8003b3c:	20000cac 	.word	0x20000cac
 8003b40:	20000818 	.word	0x20000818
 8003b44:	20000d00 	.word	0x20000d00

08003b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <vTaskInternalSetTimeOutState+0x24>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <vTaskInternalSetTimeOutState+0x28>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	605a      	str	r2, [r3, #4]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000d04 	.word	0x20000d04
 8003b70:	20000cf0 	.word	0x20000cf0

08003b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	613b      	str	r3, [r7, #16]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bb6:	f000 fe7d 	bl	80048b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <xTaskCheckForTimeOut+0xbc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d102      	bne.n	8003bda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e023      	b.n	8003c22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <xTaskCheckForTimeOut+0xc0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d007      	beq.n	8003bf6 <xTaskCheckForTimeOut+0x82>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d302      	bcc.n	8003bf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e015      	b.n	8003c22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d20b      	bcs.n	8003c18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff9b 	bl	8003b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	e004      	b.n	8003c22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c22:	f000 fe77 	bl	8004914 <vPortExitCritical>

	return xReturn;
 8003c26:	69fb      	ldr	r3, [r7, #28]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000cf0 	.word	0x20000cf0
 8003c34:	20000d04 	.word	0x20000d04

08003c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <vTaskMissedYield+0x14>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	20000d00 	.word	0x20000d00

08003c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c58:	f000 f852 	bl	8003d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <prvIdleTask+0x28>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d9f9      	bls.n	8003c58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <prvIdleTask+0x2c>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c74:	e7f0      	b.n	8003c58 <prvIdleTask+0x8>
 8003c76:	bf00      	nop
 8003c78:	2000081c 	.word	0x2000081c
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	e00c      	b.n	8003ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <prvInitialiseTaskLists+0x60>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fc90 	bl	80025c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b37      	cmp	r3, #55	; 0x37
 8003caa:	d9ef      	bls.n	8003c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <prvInitialiseTaskLists+0x64>)
 8003cae:	f7fe fc87 	bl	80025c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cb2:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <prvInitialiseTaskLists+0x68>)
 8003cb4:	f7fe fc84 	bl	80025c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <prvInitialiseTaskLists+0x6c>)
 8003cba:	f7fe fc81 	bl	80025c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cbe:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <prvInitialiseTaskLists+0x70>)
 8003cc0:	f7fe fc7e 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <prvInitialiseTaskLists+0x74>)
 8003cc6:	f7fe fc7b 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <prvInitialiseTaskLists+0x78>)
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <prvInitialiseTaskLists+0x64>)
 8003cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvInitialiseTaskLists+0x7c>)
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <prvInitialiseTaskLists+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000081c 	.word	0x2000081c
 8003ce4:	20000c7c 	.word	0x20000c7c
 8003ce8:	20000c90 	.word	0x20000c90
 8003cec:	20000cac 	.word	0x20000cac
 8003cf0:	20000cc0 	.word	0x20000cc0
 8003cf4:	20000cd8 	.word	0x20000cd8
 8003cf8:	20000ca4 	.word	0x20000ca4
 8003cfc:	20000ca8 	.word	0x20000ca8

08003d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d06:	e019      	b.n	8003d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d08:	f000 fdd4 	bl	80048b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <prvCheckTasksWaitingTermination+0x50>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fcdb 	bl	80026d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <prvCheckTasksWaitingTermination+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <prvCheckTasksWaitingTermination+0x54>)
 8003d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d32:	f000 fdef 	bl	8004914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f810 	bl	8003d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e1      	bne.n	8003d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000cc0 	.word	0x20000cc0
 8003d54:	20000cec 	.word	0x20000cec
 8003d58:	20000cd4 	.word	0x20000cd4

08003d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3354      	adds	r3, #84	; 0x54
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fa91 	bl	8005290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ff87 	bl	8004c90 <vPortFree>
				vPortFree( pxTCB );
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ff84 	bl	8004c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d88:	e018      	b.n	8003dbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d103      	bne.n	8003d9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 ff7b 	bl	8004c90 <vPortFree>
	}
 8003d9a:	e00f      	b.n	8003dbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d00a      	beq.n	8003dbc <prvDeleteTCB+0x60>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60fb      	str	r3, [r7, #12]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <prvDeleteTCB+0x5e>
	}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <prvResetNextTaskUnblockTime+0x38>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <prvResetNextTaskUnblockTime+0x3c>)
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ddc:	e008      	b.n	8003df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvResetNextTaskUnblockTime+0x38>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <prvResetNextTaskUnblockTime+0x3c>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20000ca4 	.word	0x20000ca4
 8003e00:	20000d0c 	.word	0x20000d0c

08003e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <xTaskGetSchedulerState+0x34>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e12:	2301      	movs	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	e008      	b.n	8003e2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <xTaskGetSchedulerState+0x38>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e20:	2302      	movs	r3, #2
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e001      	b.n	8003e2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e2a:	687b      	ldr	r3, [r7, #4]
	}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	20000cf8 	.word	0x20000cf8
 8003e3c:	20000d14 	.word	0x20000d14

08003e40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d056      	beq.n	8003f04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <xTaskPriorityDisinherit+0xd0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d00a      	beq.n	8003e76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60fb      	str	r3, [r7, #12]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60bb      	str	r3, [r7, #8]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d02c      	beq.n	8003f04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d128      	bne.n	8003f04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fc0c 	bl	80026d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <xTaskPriorityDisinherit+0xd4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d903      	bls.n	8003ee4 <xTaskPriorityDisinherit+0xa4>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <xTaskPriorityDisinherit+0xd4>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <xTaskPriorityDisinherit+0xd8>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fb8d 	bl	800261a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f04:	697b      	ldr	r3, [r7, #20]
	}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000818 	.word	0x20000818
 8003f14:	20000cf4 	.word	0x20000cf4
 8003f18:	2000081c 	.word	0x2000081c

08003f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f26:	4b21      	ldr	r3, [pc, #132]	; (8003fac <prvAddCurrentTaskToDelayedList+0x90>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fbce 	bl	80026d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d10a      	bne.n	8003f56 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4819      	ldr	r0, [pc, #100]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f50:	f7fe fb63 	bl	800261a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f54:	e026      	b.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d209      	bcs.n	8003f82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7fe fb71 	bl	8002662 <vListInsert>
}
 8003f80:	e010      	b.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f7fe fb67 	bl	8002662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d202      	bcs.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000cf0 	.word	0x20000cf0
 8003fb0:	20000818 	.word	0x20000818
 8003fb4:	20000cd8 	.word	0x20000cd8
 8003fb8:	20000ca8 	.word	0x20000ca8
 8003fbc:	20000ca4 	.word	0x20000ca4
 8003fc0:	20000d0c 	.word	0x20000d0c

08003fc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fce:	f000 fb07 	bl	80045e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <xTimerCreateTimerTask+0x80>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d021      	beq.n	800401e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fe2:	1d3a      	adds	r2, r7, #4
 8003fe4:	f107 0108 	add.w	r1, r7, #8
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe facd 	bl	800258c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	9202      	str	r2, [sp, #8]
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	460a      	mov	r2, r1
 8004004:	4910      	ldr	r1, [pc, #64]	; (8004048 <xTimerCreateTimerTask+0x84>)
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <xTimerCreateTimerTask+0x88>)
 8004008:	f7ff f8b4 	bl	8003174 <xTaskCreateStatic>
 800400c:	4603      	mov	r3, r0
 800400e:	4a10      	ldr	r2, [pc, #64]	; (8004050 <xTimerCreateTimerTask+0x8c>)
 8004010:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <xTimerCreateTimerTask+0x8c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000d48 	.word	0x20000d48
 8004048:	08006064 	.word	0x08006064
 800404c:	08004189 	.word	0x08004189
 8004050:	20000d4c 	.word	0x20000d4c

08004054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xTimerGenericCommand+0x2e>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	623b      	str	r3, [r7, #32]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <xTimerGenericCommand+0x98>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02a      	beq.n	80040e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b05      	cmp	r3, #5
 800409a:	dc18      	bgt.n	80040ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800409c:	f7ff feb2 	bl	8003e04 <xTaskGetSchedulerState>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d109      	bne.n	80040ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <xTimerGenericCommand+0x98>)
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	f107 0110 	add.w	r1, r7, #16
 80040ae:	2300      	movs	r3, #0
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	f7fe fc77 	bl	80029a4 <xQueueGenericSend>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24
 80040b8:	e012      	b.n	80040e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <xTimerGenericCommand+0x98>)
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	f107 0110 	add.w	r1, r7, #16
 80040c2:	2300      	movs	r3, #0
 80040c4:	2200      	movs	r2, #0
 80040c6:	f7fe fc6d 	bl	80029a4 <xQueueGenericSend>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24
 80040cc:	e008      	b.n	80040e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <xTimerGenericCommand+0x98>)
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	f107 0110 	add.w	r1, r7, #16
 80040d6:	2300      	movs	r3, #0
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	f7fe fd61 	bl	8002ba0 <xQueueGenericSendFromISR>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3728      	adds	r7, #40	; 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000d48 	.word	0x20000d48

080040f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <prvProcessExpiredTimer+0x94>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3304      	adds	r3, #4
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fae3 	bl	80026d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	18d1      	adds	r1, r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6978      	ldr	r0, [r7, #20]
 800412a:	f000 f8d1 	bl	80042d0 <prvInsertTimerInActiveList>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01f      	beq.n	8004174 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004134:	2300      	movs	r3, #0
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	2100      	movs	r1, #0
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff ff88 	bl	8004054 <xTimerGenericCommand>
 8004144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d113      	bne.n	8004174 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	4798      	blx	r3
}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000d40 	.word	0x20000d40

08004188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f857 	bl	8004248 <prvGetNextExpireTime>
 800419a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4619      	mov	r1, r3
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f803 	bl	80041ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041a6:	f000 f8d5 	bl	8004354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041aa:	e7f1      	b.n	8004190 <prvTimerTask+0x8>

080041ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041b6:	f7ff fa39 	bl	800362c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f866 	bl	8004290 <prvSampleTimeNow>
 80041c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d130      	bne.n	800422e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d806      	bhi.n	80041e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041da:	f7ff fa35 	bl	8003648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff85 	bl	80040f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041e6:	e024      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <prvProcessTimerOrBlockTask+0x90>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <prvProcessTimerOrBlockTask+0x50>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <prvProcessTimerOrBlockTask+0x52>
 80041fc:	2300      	movs	r3, #0
 80041fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <prvProcessTimerOrBlockTask+0x94>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f7fe ff7d 	bl	800310c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004212:	f7ff fa19 	bl	8003648 <xTaskResumeAll>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <prvProcessTimerOrBlockTask+0x98>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
}
 800422c:	e001      	b.n	8004232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800422e:	f7ff fa0b 	bl	8003648 <xTaskResumeAll>
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000d44 	.word	0x20000d44
 8004240:	20000d48 	.word	0x20000d48
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <prvGetNextExpireTime+0x44>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <prvGetNextExpireTime+0x16>
 800425a:	2201      	movs	r2, #1
 800425c:	e000      	b.n	8004260 <prvGetNextExpireTime+0x18>
 800425e:	2200      	movs	r2, #0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <prvGetNextExpireTime+0x44>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e001      	b.n	800427c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000d40 	.word	0x20000d40

08004290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004298:	f7ff fa74 	bl	8003784 <xTaskGetTickCount>
 800429c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d205      	bcs.n	80042b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042a8:	f000 f936 	bl	8004518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e002      	b.n	80042ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042ba:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvSampleTimeNow+0x3c>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042c0:	68fb      	ldr	r3, [r7, #12]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000d50 	.word	0x20000d50

080042d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d812      	bhi.n	800431c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e01b      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <prvInsertTimerInActiveList+0x7c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe f9a4 	bl	8002662 <vListInsert>
 800431a:	e012      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d206      	bcs.n	8004332 <prvInsertTimerInActiveList+0x62>
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e007      	b.n	8004342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvInsertTimerInActiveList+0x80>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7fe f990 	bl	8002662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004342:	697b      	ldr	r3, [r7, #20]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000d44 	.word	0x20000d44
 8004350:	20000d40 	.word	0x20000d40

08004354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800435a:	e0ca      	b.n	80044f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da18      	bge.n	8004394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	3304      	adds	r3, #4
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438a:	6850      	ldr	r0, [r2, #4]
 800438c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	4611      	mov	r1, r2
 8004392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f2c0 80aa 	blt.w	80044f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe f991 	bl	80026d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043b2:	463b      	mov	r3, r7
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff6b 	bl	8004290 <prvSampleTimeNow>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b09      	cmp	r3, #9
 80043c0:	f200 8097 	bhi.w	80044f2 <prvProcessReceivedCommands+0x19e>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <prvProcessReceivedCommands+0x78>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	08004469 	.word	0x08004469
 80043dc:	0800447d 	.word	0x0800447d
 80043e0:	080044c7 	.word	0x080044c7
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	080043f5 	.word	0x080043f5
 80043ec:	08004469 	.word	0x08004469
 80043f0:	0800447d 	.word	0x0800447d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	18d1      	adds	r1, r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004414:	f7ff ff5c 	bl	80042d0 <prvInsertTimerInActiveList>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d069      	beq.n	80044f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05e      	beq.n	80044f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	441a      	add	r2, r3
 800443c:	2300      	movs	r3, #0
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2300      	movs	r3, #0
 8004442:	2100      	movs	r1, #0
 8004444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004446:	f7ff fe05 	bl	8004054 <xTimerGenericCommand>
 800444a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d14f      	bne.n	80044f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	61bb      	str	r3, [r7, #24]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800447a:	e03a      	b.n	80044f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	617b      	str	r3, [r7, #20]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	18d1      	adds	r1, r2, r3
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c0:	f7ff ff06 	bl	80042d0 <prvInsertTimerInActiveList>
					break;
 80044c4:	e015      	b.n	80044f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d6:	f000 fbdb 	bl	8004c90 <vPortFree>
 80044da:	e00a      	b.n	80044f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044ee:	e000      	b.n	80044f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <prvProcessReceivedCommands+0x1c0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1d39      	adds	r1, r7, #4
 80044f8:	2200      	movs	r2, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fbec 	bl	8002cd8 <xQueueReceive>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	f47f af2a 	bne.w	800435c <prvProcessReceivedCommands+0x8>
	}
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3730      	adds	r7, #48	; 0x30
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000d48 	.word	0x20000d48

08004518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800451e:	e048      	b.n	80045b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004520:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452a:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f8cb 	bl	80026d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02e      	beq.n	80045b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d90e      	bls.n	8004584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004572:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fe f870 	bl	8002662 <vListInsert>
 8004582:	e016      	b.n	80045b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2300      	movs	r3, #0
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	2100      	movs	r1, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff fd60 	bl	8004054 <xTimerGenericCommand>
 8004594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	603b      	str	r3, [r7, #0]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1b1      	bne.n	8004520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvSwitchTimerLists+0xc4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <prvSwitchTimerLists+0xc0>)
 80045c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045ca:	4a04      	ldr	r2, [pc, #16]	; (80045dc <prvSwitchTimerLists+0xc4>)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000d40 	.word	0x20000d40
 80045dc:	20000d44 	.word	0x20000d44

080045e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045e6:	f000 f965 	bl	80048b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <prvCheckForValidListAndQueue+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d120      	bne.n	8004634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045f2:	4814      	ldr	r0, [pc, #80]	; (8004644 <prvCheckForValidListAndQueue+0x64>)
 80045f4:	f7fd ffe4 	bl	80025c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045f8:	4813      	ldr	r0, [pc, #76]	; (8004648 <prvCheckForValidListAndQueue+0x68>)
 80045fa:	f7fd ffe1 	bl	80025c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <prvCheckForValidListAndQueue+0x6c>)
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <prvCheckForValidListAndQueue+0x64>)
 8004602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <prvCheckForValidListAndQueue+0x70>)
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <prvCheckForValidListAndQueue+0x68>)
 8004608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800460a:	2300      	movs	r3, #0
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <prvCheckForValidListAndQueue+0x74>)
 8004610:	4a11      	ldr	r2, [pc, #68]	; (8004658 <prvCheckForValidListAndQueue+0x78>)
 8004612:	2110      	movs	r1, #16
 8004614:	200a      	movs	r0, #10
 8004616:	f7fe f8ef 	bl	80027f8 <xQueueGenericCreateStatic>
 800461a:	4603      	mov	r3, r0
 800461c:	4a08      	ldr	r2, [pc, #32]	; (8004640 <prvCheckForValidListAndQueue+0x60>)
 800461e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <prvCheckForValidListAndQueue+0x60>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <prvCheckForValidListAndQueue+0x60>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	490b      	ldr	r1, [pc, #44]	; (800465c <prvCheckForValidListAndQueue+0x7c>)
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fd42 	bl	80030b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004634:	f000 f96e 	bl	8004914 <vPortExitCritical>
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000d48 	.word	0x20000d48
 8004644:	20000d18 	.word	0x20000d18
 8004648:	20000d2c 	.word	0x20000d2c
 800464c:	20000d40 	.word	0x20000d40
 8004650:	20000d44 	.word	0x20000d44
 8004654:	20000df4 	.word	0x20000df4
 8004658:	20000d54 	.word	0x20000d54
 800465c:	0800606c 	.word	0x0800606c

08004660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b04      	subs	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b04      	subs	r3, #4
 800467e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b04      	subs	r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004690:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <pxPortInitialiseStack+0x64>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3b14      	subs	r3, #20
 800469a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b04      	subs	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f06f 0202 	mvn.w	r2, #2
 80046ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3b20      	subs	r3, #32
 80046b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	080046c9 	.word	0x080046c9

080046c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <prvTaskExitError+0x54>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d00a      	beq.n	80046f2 <prvTaskExitError+0x2a>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60fb      	str	r3, [r7, #12]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <prvTaskExitError+0x28>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60bb      	str	r3, [r7, #8]
}
 8004704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004706:	bf00      	nop
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0fc      	beq.n	8004708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c

08004720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <pxCurrentTCBConst2>)
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	f380 8809 	msr	PSP, r0
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8811 	msr	BASEPRI, r0
 800473a:	4770      	bx	lr
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst2>:
 8004740:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004748:	4808      	ldr	r0, [pc, #32]	; (800476c <prvPortStartFirstTask+0x24>)
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	6800      	ldr	r0, [r0, #0]
 800474e:	f380 8808 	msr	MSP, r0
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8814 	msr	CONTROL, r0
 800475a:	b662      	cpsie	i
 800475c:	b661      	cpsie	f
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	df00      	svc	0
 8004768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800476a:	bf00      	nop
 800476c:	e000ed08 	.word	0xe000ed08

08004770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <xPortStartScheduler+0x120>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a46      	ldr	r2, [pc, #280]	; (8004894 <xPortStartScheduler+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10a      	bne.n	8004796 <xPortStartScheduler+0x26>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <xPortStartScheduler+0x120>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3f      	ldr	r2, [pc, #252]	; (8004898 <xPortStartScheduler+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10a      	bne.n	80047b6 <xPortStartScheduler+0x46>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047b6:	4b39      	ldr	r3, [pc, #228]	; (800489c <xPortStartScheduler+0x12c>)
 80047b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	22ff      	movs	r2, #255	; 0xff
 80047c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <xPortStartScheduler+0x130>)
 80047dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xPortStartScheduler+0x134>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e4:	e009      	b.n	80047fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <xPortStartScheduler+0x134>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <xPortStartScheduler+0x134>)
 80047ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d0ef      	beq.n	80047e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004806:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <xPortStartScheduler+0x134>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	d00a      	beq.n	8004828 <xPortStartScheduler+0xb8>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60bb      	str	r3, [r7, #8]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004828:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <xPortStartScheduler+0x134>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <xPortStartScheduler+0x134>)
 8004830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <xPortStartScheduler+0x134>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800483a:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <xPortStartScheduler+0x134>)
 800483c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004846:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <xPortStartScheduler+0x138>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a17      	ldr	r2, [pc, #92]	; (80048a8 <xPortStartScheduler+0x138>)
 800484c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <xPortStartScheduler+0x138>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <xPortStartScheduler+0x138>)
 8004858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800485c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800485e:	f000 f8dd 	bl	8004a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <xPortStartScheduler+0x13c>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004868:	f000 f8fc 	bl	8004a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xPortStartScheduler+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <xPortStartScheduler+0x140>)
 8004872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004878:	f7ff ff66 	bl	8004748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800487c:	f7ff f84c 	bl	8003918 <vTaskSwitchContext>
	prvTaskExitError();
 8004880:	f7ff ff22 	bl	80046c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed00 	.word	0xe000ed00
 8004894:	410fc271 	.word	0x410fc271
 8004898:	410fc270 	.word	0x410fc270
 800489c:	e000e400 	.word	0xe000e400
 80048a0:	20000e44 	.word	0x20000e44
 80048a4:	20000e48 	.word	0x20000e48
 80048a8:	e000ed20 	.word	0xe000ed20
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	e000ef34 	.word	0xe000ef34

080048b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	607b      	str	r3, [r7, #4]
}
 80048cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <vPortEnterCritical+0x58>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a0d      	ldr	r2, [pc, #52]	; (800490c <vPortEnterCritical+0x58>)
 80048d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <vPortEnterCritical+0x58>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10f      	bne.n	8004900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortEnterCritical+0x5c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <vPortEnterCritical+0x4c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <vPortEnterCritical+0x4a>
	}
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	2000000c 	.word	0x2000000c
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <vPortExitCritical+0x50>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <vPortExitCritical+0x24>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <vPortExitCritical+0x50>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <vPortExitCritical+0x50>)
 8004940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <vPortExitCritical+0x50>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <vPortExitCritical+0x42>
 800494a:	2300      	movs	r3, #0
 800494c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f383 8811 	msr	BASEPRI, r3
}
 8004954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000000c 	.word	0x2000000c
	...

08004970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004970:	f3ef 8009 	mrs	r0, PSP
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pxCurrentTCBConst>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f01e 0f10 	tst.w	lr, #16
 8004980:	bf08      	it	eq
 8004982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	6010      	str	r0, [r2, #0]
 800498c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004994:	f380 8811 	msr	BASEPRI, r0
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f7fe ffba 	bl	8003918 <vTaskSwitchContext>
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f380 8811 	msr	BASEPRI, r0
 80049ac:	bc09      	pop	{r0, r3}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b6:	f01e 0f10 	tst.w	lr, #16
 80049ba:	bf08      	it	eq
 80049bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049c0:	f380 8809 	msr	PSP, r0
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst>:
 80049d0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049f2:	f7fe fed7 	bl	80037a4 <xTaskIncrementTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <xPortSysTickHandler+0x40>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
}
 8004a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <vPortSetupTimerInterrupt+0x38>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <vPortSetupTimerInterrupt+0x3c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <vPortSetupTimerInterrupt+0x40>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <vPortSetupTimerInterrupt+0x44>)
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010
 8004a54:	e000e018 	.word	0xe000e018
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	10624dd3 	.word	0x10624dd3
 8004a60:	e000e014 	.word	0xe000e014

08004a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a74 <vPortEnableVFP+0x10>
 8004a68:	6801      	ldr	r1, [r0, #0]
 8004a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a6e:	6001      	str	r1, [r0, #0]
 8004a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a72:	bf00      	nop
 8004a74:	e000ed88 	.word	0xe000ed88

08004a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a7e:	f3ef 8305 	mrs	r3, IPSR
 8004a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d914      	bls.n	8004ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <vPortValidateInterruptPriority+0x70>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a94:	4b15      	ldr	r3, [pc, #84]	; (8004aec <vPortValidateInterruptPriority+0x74>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	7afa      	ldrb	r2, [r7, #11]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d20a      	bcs.n	8004ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <vPortValidateInterruptPriority+0x78>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <vPortValidateInterruptPriority+0x7c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d90a      	bls.n	8004ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	603b      	str	r3, [r7, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <vPortValidateInterruptPriority+0x60>
	}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000e3f0 	.word	0xe000e3f0
 8004aec:	20000e44 	.word	0x20000e44
 8004af0:	e000ed0c 	.word	0xe000ed0c
 8004af4:	20000e48 	.word	0x20000e48

08004af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b04:	f7fe fd92 	bl	800362c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <pvPortMalloc+0x180>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b10:	f000 f920 	bl	8004d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <pvPortMalloc+0x184>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8093 	bne.w	8004c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b28:	2208      	movs	r2, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	3308      	adds	r3, #8
 8004b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <pvPortMalloc+0x6c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	617b      	str	r3, [r7, #20]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d06e      	beq.n	8004c48 <pvPortMalloc+0x150>
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <pvPortMalloc+0x188>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d869      	bhi.n	8004c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	e004      	b.n	8004b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <pvPortMalloc+0xa4>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f1      	bne.n	8004b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d050      	beq.n	8004c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2208      	movs	r2, #8
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d91f      	bls.n	8004c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	613b      	str	r3, [r7, #16]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f000 f908 	bl	8004e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <pvPortMalloc+0x188>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <pvPortMalloc+0x188>)
 8004c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <pvPortMalloc+0x188>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <pvPortMalloc+0x190>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d203      	bcs.n	8004c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <pvPortMalloc+0x188>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x190>)
 8004c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <pvPortMalloc+0x184>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0x194>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <pvPortMalloc+0x194>)
 8004c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c48:	f7fe fcfe 	bl	8003648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <pvPortMalloc+0x174>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0x172>
	return pvReturn;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20004a54 	.word	0x20004a54
 8004c7c:	20004a68 	.word	0x20004a68
 8004c80:	20004a58 	.word	0x20004a58
 8004c84:	20004a4c 	.word	0x20004a4c
 8004c88:	20004a5c 	.word	0x20004a5c
 8004c8c:	20004a60 	.word	0x20004a60

08004c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04d      	beq.n	8004d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <vPortFree+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vPortFree+0x44>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <vPortFree+0x62>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60bb      	str	r3, [r7, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <vPortFree+0xb8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11a      	bne.n	8004d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <vPortFree+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7fe fc88 	bl	800362c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortFree+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <vPortFree+0xbc>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f874 	bl	8004e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <vPortFree+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <vPortFree+0xc0>)
 8004d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d3a:	f7fe fc85 	bl	8003648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20004a68 	.word	0x20004a68
 8004d4c:	20004a58 	.word	0x20004a58
 8004d50:	20004a64 	.word	0x20004a64

08004d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvHeapInit+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3307      	adds	r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <prvHeapInit+0xac>)
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <prvHeapInit+0xb0>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <prvHeapInit+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <prvHeapInit+0xb4>)
 8004db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <prvHeapInit+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvHeapInit+0xb4>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <prvHeapInit+0xb8>)
 8004de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <prvHeapInit+0xbc>)
 8004dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvHeapInit+0xc0>)
 8004dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000e4c 	.word	0x20000e4c
 8004e04:	20004a4c 	.word	0x20004a4c
 8004e08:	20004a54 	.word	0x20004a54
 8004e0c:	20004a5c 	.word	0x20004a5c
 8004e10:	20004a58 	.word	0x20004a58
 8004e14:	20004a68 	.word	0x20004a68

08004e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <prvInsertBlockIntoFreeList+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x14>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d8f7      	bhi.n	8004e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d108      	bne.n	8004e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d118      	bne.n	8004ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d00d      	beq.n	8004e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e003      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d002      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20004a4c 	.word	0x20004a4c
 8004ec8:	20004a54 	.word	0x20004a54

08004ecc <__errno>:
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <__errno+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000010 	.word	0x20000010

08004ed8 <std>:
 8004ed8:	2300      	movs	r3, #0
 8004eda:	b510      	push	{r4, lr}
 8004edc:	4604      	mov	r4, r0
 8004ede:	e9c0 3300 	strd	r3, r3, [r0]
 8004ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ee6:	6083      	str	r3, [r0, #8]
 8004ee8:	8181      	strh	r1, [r0, #12]
 8004eea:	6643      	str	r3, [r0, #100]	; 0x64
 8004eec:	81c2      	strh	r2, [r0, #14]
 8004eee:	6183      	str	r3, [r0, #24]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	305c      	adds	r0, #92	; 0x5c
 8004ef6:	f000 f91a 	bl	800512e <memset>
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <std+0x38>)
 8004efc:	6263      	str	r3, [r4, #36]	; 0x24
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <std+0x3c>)
 8004f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <std+0x40>)
 8004f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <std+0x44>)
 8004f08:	6224      	str	r4, [r4, #32]
 8004f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	bf00      	nop
 8004f10:	08005369 	.word	0x08005369
 8004f14:	0800538b 	.word	0x0800538b
 8004f18:	080053c3 	.word	0x080053c3
 8004f1c:	080053e7 	.word	0x080053e7

08004f20 <_cleanup_r>:
 8004f20:	4901      	ldr	r1, [pc, #4]	; (8004f28 <_cleanup_r+0x8>)
 8004f22:	f000 b8af 	b.w	8005084 <_fwalk_reent>
 8004f26:	bf00      	nop
 8004f28:	0800557d 	.word	0x0800557d

08004f2c <__sfmoreglue>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	1e4a      	subs	r2, r1, #1
 8004f30:	2568      	movs	r5, #104	; 0x68
 8004f32:	4355      	muls	r5, r2
 8004f34:	460e      	mov	r6, r1
 8004f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f3a:	f000 f901 	bl	8005140 <_malloc_r>
 8004f3e:	4604      	mov	r4, r0
 8004f40:	b140      	cbz	r0, 8004f54 <__sfmoreglue+0x28>
 8004f42:	2100      	movs	r1, #0
 8004f44:	e9c0 1600 	strd	r1, r6, [r0]
 8004f48:	300c      	adds	r0, #12
 8004f4a:	60a0      	str	r0, [r4, #8]
 8004f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f50:	f000 f8ed 	bl	800512e <memset>
 8004f54:	4620      	mov	r0, r4
 8004f56:	bd70      	pop	{r4, r5, r6, pc}

08004f58 <__sfp_lock_acquire>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__sfp_lock_acquire+0x8>)
 8004f5a:	f000 b8d8 	b.w	800510e <__retarget_lock_acquire_recursive>
 8004f5e:	bf00      	nop
 8004f60:	20004b28 	.word	0x20004b28

08004f64 <__sfp_lock_release>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__sfp_lock_release+0x8>)
 8004f66:	f000 b8d3 	b.w	8005110 <__retarget_lock_release_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	20004b28 	.word	0x20004b28

08004f70 <__sinit_lock_acquire>:
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <__sinit_lock_acquire+0x8>)
 8004f72:	f000 b8cc 	b.w	800510e <__retarget_lock_acquire_recursive>
 8004f76:	bf00      	nop
 8004f78:	20004b23 	.word	0x20004b23

08004f7c <__sinit_lock_release>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__sinit_lock_release+0x8>)
 8004f7e:	f000 b8c7 	b.w	8005110 <__retarget_lock_release_recursive>
 8004f82:	bf00      	nop
 8004f84:	20004b23 	.word	0x20004b23

08004f88 <__sinit>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	f7ff fff0 	bl	8004f70 <__sinit_lock_acquire>
 8004f90:	69a3      	ldr	r3, [r4, #24]
 8004f92:	b11b      	cbz	r3, 8004f9c <__sinit+0x14>
 8004f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f98:	f7ff bff0 	b.w	8004f7c <__sinit_lock_release>
 8004f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <__sinit+0x68>)
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <__sinit+0x6c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	bf04      	itt	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	61a3      	streq	r3, [r4, #24]
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f820 	bl	8004ff8 <__sfp>
 8004fb8:	6060      	str	r0, [r4, #4]
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f81c 	bl	8004ff8 <__sfp>
 8004fc0:	60a0      	str	r0, [r4, #8]
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 f818 	bl	8004ff8 <__sfp>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60e0      	str	r0, [r4, #12]
 8004fcc:	2104      	movs	r1, #4
 8004fce:	6860      	ldr	r0, [r4, #4]
 8004fd0:	f7ff ff82 	bl	8004ed8 <std>
 8004fd4:	68a0      	ldr	r0, [r4, #8]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2109      	movs	r1, #9
 8004fda:	f7ff ff7d 	bl	8004ed8 <std>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	2112      	movs	r1, #18
 8004fe4:	f7ff ff78 	bl	8004ed8 <std>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	61a3      	str	r3, [r4, #24]
 8004fec:	e7d2      	b.n	8004f94 <__sinit+0xc>
 8004fee:	bf00      	nop
 8004ff0:	08006110 	.word	0x08006110
 8004ff4:	08004f21 	.word	0x08004f21

08004ff8 <__sfp>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	f7ff ffac 	bl	8004f58 <__sfp_lock_acquire>
 8005000:	4b1e      	ldr	r3, [pc, #120]	; (800507c <__sfp+0x84>)
 8005002:	681e      	ldr	r6, [r3, #0]
 8005004:	69b3      	ldr	r3, [r6, #24]
 8005006:	b913      	cbnz	r3, 800500e <__sfp+0x16>
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff ffbd 	bl	8004f88 <__sinit>
 800500e:	3648      	adds	r6, #72	; 0x48
 8005010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005014:	3b01      	subs	r3, #1
 8005016:	d503      	bpl.n	8005020 <__sfp+0x28>
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	b30b      	cbz	r3, 8005060 <__sfp+0x68>
 800501c:	6836      	ldr	r6, [r6, #0]
 800501e:	e7f7      	b.n	8005010 <__sfp+0x18>
 8005020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005024:	b9d5      	cbnz	r5, 800505c <__sfp+0x64>
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <__sfp+0x88>)
 8005028:	60e3      	str	r3, [r4, #12]
 800502a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800502e:	6665      	str	r5, [r4, #100]	; 0x64
 8005030:	f000 f86c 	bl	800510c <__retarget_lock_init_recursive>
 8005034:	f7ff ff96 	bl	8004f64 <__sfp_lock_release>
 8005038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800503c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005040:	6025      	str	r5, [r4, #0]
 8005042:	61a5      	str	r5, [r4, #24]
 8005044:	2208      	movs	r2, #8
 8005046:	4629      	mov	r1, r5
 8005048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800504c:	f000 f86f 	bl	800512e <memset>
 8005050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005058:	4620      	mov	r0, r4
 800505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800505c:	3468      	adds	r4, #104	; 0x68
 800505e:	e7d9      	b.n	8005014 <__sfp+0x1c>
 8005060:	2104      	movs	r1, #4
 8005062:	4638      	mov	r0, r7
 8005064:	f7ff ff62 	bl	8004f2c <__sfmoreglue>
 8005068:	4604      	mov	r4, r0
 800506a:	6030      	str	r0, [r6, #0]
 800506c:	2800      	cmp	r0, #0
 800506e:	d1d5      	bne.n	800501c <__sfp+0x24>
 8005070:	f7ff ff78 	bl	8004f64 <__sfp_lock_release>
 8005074:	230c      	movs	r3, #12
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	e7ee      	b.n	8005058 <__sfp+0x60>
 800507a:	bf00      	nop
 800507c:	08006110 	.word	0x08006110
 8005080:	ffff0001 	.word	0xffff0001

08005084 <_fwalk_reent>:
 8005084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005088:	4606      	mov	r6, r0
 800508a:	4688      	mov	r8, r1
 800508c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005090:	2700      	movs	r7, #0
 8005092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005096:	f1b9 0901 	subs.w	r9, r9, #1
 800509a:	d505      	bpl.n	80050a8 <_fwalk_reent+0x24>
 800509c:	6824      	ldr	r4, [r4, #0]
 800509e:	2c00      	cmp	r4, #0
 80050a0:	d1f7      	bne.n	8005092 <_fwalk_reent+0xe>
 80050a2:	4638      	mov	r0, r7
 80050a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a8:	89ab      	ldrh	r3, [r5, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d907      	bls.n	80050be <_fwalk_reent+0x3a>
 80050ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050b2:	3301      	adds	r3, #1
 80050b4:	d003      	beq.n	80050be <_fwalk_reent+0x3a>
 80050b6:	4629      	mov	r1, r5
 80050b8:	4630      	mov	r0, r6
 80050ba:	47c0      	blx	r8
 80050bc:	4307      	orrs	r7, r0
 80050be:	3568      	adds	r5, #104	; 0x68
 80050c0:	e7e9      	b.n	8005096 <_fwalk_reent+0x12>
	...

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	; (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	; (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 ffa6 	bl	8006028 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08006204 	.word	0x08006204
 8005100:	08006204 	.word	0x08006204
 8005104:	08006204 	.word	0x08006204
 8005108:	08006208 	.word	0x08006208

0800510c <__retarget_lock_init_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_acquire_recursive>:
 800510e:	4770      	bx	lr

08005110 <__retarget_lock_release_recursive>:
 8005110:	4770      	bx	lr

08005112 <memcpy>:
 8005112:	440a      	add	r2, r1
 8005114:	4291      	cmp	r1, r2
 8005116:	f100 33ff 	add.w	r3, r0, #4294967295
 800511a:	d100      	bne.n	800511e <memcpy+0xc>
 800511c:	4770      	bx	lr
 800511e:	b510      	push	{r4, lr}
 8005120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005128:	4291      	cmp	r1, r2
 800512a:	d1f9      	bne.n	8005120 <memcpy+0xe>
 800512c:	bd10      	pop	{r4, pc}

0800512e <memset>:
 800512e:	4402      	add	r2, r0
 8005130:	4603      	mov	r3, r0
 8005132:	4293      	cmp	r3, r2
 8005134:	d100      	bne.n	8005138 <memset+0xa>
 8005136:	4770      	bx	lr
 8005138:	f803 1b01 	strb.w	r1, [r3], #1
 800513c:	e7f9      	b.n	8005132 <memset+0x4>
	...

08005140 <_malloc_r>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	1ccd      	adds	r5, r1, #3
 8005144:	f025 0503 	bic.w	r5, r5, #3
 8005148:	3508      	adds	r5, #8
 800514a:	2d0c      	cmp	r5, #12
 800514c:	bf38      	it	cc
 800514e:	250c      	movcc	r5, #12
 8005150:	2d00      	cmp	r5, #0
 8005152:	4606      	mov	r6, r0
 8005154:	db01      	blt.n	800515a <_malloc_r+0x1a>
 8005156:	42a9      	cmp	r1, r5
 8005158:	d903      	bls.n	8005162 <_malloc_r+0x22>
 800515a:	230c      	movs	r3, #12
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	2000      	movs	r0, #0
 8005160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005162:	f000 fa73 	bl	800564c <__malloc_lock>
 8005166:	4921      	ldr	r1, [pc, #132]	; (80051ec <_malloc_r+0xac>)
 8005168:	680a      	ldr	r2, [r1, #0]
 800516a:	4614      	mov	r4, r2
 800516c:	b99c      	cbnz	r4, 8005196 <_malloc_r+0x56>
 800516e:	4f20      	ldr	r7, [pc, #128]	; (80051f0 <_malloc_r+0xb0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b923      	cbnz	r3, 800517e <_malloc_r+0x3e>
 8005174:	4621      	mov	r1, r4
 8005176:	4630      	mov	r0, r6
 8005178:	f000 f8e6 	bl	8005348 <_sbrk_r>
 800517c:	6038      	str	r0, [r7, #0]
 800517e:	4629      	mov	r1, r5
 8005180:	4630      	mov	r0, r6
 8005182:	f000 f8e1 	bl	8005348 <_sbrk_r>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d123      	bne.n	80051d2 <_malloc_r+0x92>
 800518a:	230c      	movs	r3, #12
 800518c:	6033      	str	r3, [r6, #0]
 800518e:	4630      	mov	r0, r6
 8005190:	f000 fa62 	bl	8005658 <__malloc_unlock>
 8005194:	e7e3      	b.n	800515e <_malloc_r+0x1e>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	1b5b      	subs	r3, r3, r5
 800519a:	d417      	bmi.n	80051cc <_malloc_r+0x8c>
 800519c:	2b0b      	cmp	r3, #11
 800519e:	d903      	bls.n	80051a8 <_malloc_r+0x68>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	441c      	add	r4, r3
 80051a4:	6025      	str	r5, [r4, #0]
 80051a6:	e004      	b.n	80051b2 <_malloc_r+0x72>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	42a2      	cmp	r2, r4
 80051ac:	bf0c      	ite	eq
 80051ae:	600b      	streq	r3, [r1, #0]
 80051b0:	6053      	strne	r3, [r2, #4]
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 fa50 	bl	8005658 <__malloc_unlock>
 80051b8:	f104 000b 	add.w	r0, r4, #11
 80051bc:	1d23      	adds	r3, r4, #4
 80051be:	f020 0007 	bic.w	r0, r0, #7
 80051c2:	1ac2      	subs	r2, r0, r3
 80051c4:	d0cc      	beq.n	8005160 <_malloc_r+0x20>
 80051c6:	1a1b      	subs	r3, r3, r0
 80051c8:	50a3      	str	r3, [r4, r2]
 80051ca:	e7c9      	b.n	8005160 <_malloc_r+0x20>
 80051cc:	4622      	mov	r2, r4
 80051ce:	6864      	ldr	r4, [r4, #4]
 80051d0:	e7cc      	b.n	800516c <_malloc_r+0x2c>
 80051d2:	1cc4      	adds	r4, r0, #3
 80051d4:	f024 0403 	bic.w	r4, r4, #3
 80051d8:	42a0      	cmp	r0, r4
 80051da:	d0e3      	beq.n	80051a4 <_malloc_r+0x64>
 80051dc:	1a21      	subs	r1, r4, r0
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 f8b2 	bl	8005348 <_sbrk_r>
 80051e4:	3001      	adds	r0, #1
 80051e6:	d1dd      	bne.n	80051a4 <_malloc_r+0x64>
 80051e8:	e7cf      	b.n	800518a <_malloc_r+0x4a>
 80051ea:	bf00      	nop
 80051ec:	20004a6c 	.word	0x20004a6c
 80051f0:	20004a70 	.word	0x20004a70

080051f4 <rand>:
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <rand+0x60>)
 80051f6:	b510      	push	{r4, lr}
 80051f8:	681c      	ldr	r4, [r3, #0]
 80051fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051fc:	b9b3      	cbnz	r3, 800522c <rand+0x38>
 80051fe:	2018      	movs	r0, #24
 8005200:	f000 fa1c 	bl	800563c <malloc>
 8005204:	63a0      	str	r0, [r4, #56]	; 0x38
 8005206:	b928      	cbnz	r0, 8005214 <rand+0x20>
 8005208:	4602      	mov	r2, r0
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <rand+0x64>)
 800520c:	4813      	ldr	r0, [pc, #76]	; (800525c <rand+0x68>)
 800520e:	214e      	movs	r1, #78	; 0x4e
 8005210:	f000 f900 	bl	8005414 <__assert_func>
 8005214:	4a12      	ldr	r2, [pc, #72]	; (8005260 <rand+0x6c>)
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <rand+0x70>)
 8005218:	e9c0 2300 	strd	r2, r3, [r0]
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <rand+0x74>)
 800521e:	6083      	str	r3, [r0, #8]
 8005220:	230b      	movs	r3, #11
 8005222:	8183      	strh	r3, [r0, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	2300      	movs	r3, #0
 8005228:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800522c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800522e:	480f      	ldr	r0, [pc, #60]	; (800526c <rand+0x78>)
 8005230:	690a      	ldr	r2, [r1, #16]
 8005232:	694b      	ldr	r3, [r1, #20]
 8005234:	4c0e      	ldr	r4, [pc, #56]	; (8005270 <rand+0x7c>)
 8005236:	4350      	muls	r0, r2
 8005238:	fb04 0003 	mla	r0, r4, r3, r0
 800523c:	fba2 3404 	umull	r3, r4, r2, r4
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	4404      	add	r4, r0
 8005244:	f144 0000 	adc.w	r0, r4, #0
 8005248:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800524c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	20000010 	.word	0x20000010
 8005258:	08006114 	.word	0x08006114
 800525c:	0800612b 	.word	0x0800612b
 8005260:	abcd330e 	.word	0xabcd330e
 8005264:	e66d1234 	.word	0xe66d1234
 8005268:	0005deec 	.word	0x0005deec
 800526c:	5851f42d 	.word	0x5851f42d
 8005270:	4c957f2d 	.word	0x4c957f2d

08005274 <cleanup_glue>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	4605      	mov	r5, r0
 800527c:	b109      	cbz	r1, 8005282 <cleanup_glue+0xe>
 800527e:	f7ff fff9 	bl	8005274 <cleanup_glue>
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800528a:	f000 b9eb 	b.w	8005664 <_free_r>
	...

08005290 <_reclaim_reent>:
 8005290:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <_reclaim_reent+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4283      	cmp	r3, r0
 8005296:	b570      	push	{r4, r5, r6, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	d051      	beq.n	8005340 <_reclaim_reent+0xb0>
 800529c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800529e:	b143      	cbz	r3, 80052b2 <_reclaim_reent+0x22>
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d14a      	bne.n	800533c <_reclaim_reent+0xac>
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	b111      	cbz	r1, 80052b2 <_reclaim_reent+0x22>
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 f9d9 	bl	8005664 <_free_r>
 80052b2:	6961      	ldr	r1, [r4, #20]
 80052b4:	b111      	cbz	r1, 80052bc <_reclaim_reent+0x2c>
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f9d4 	bl	8005664 <_free_r>
 80052bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052be:	b111      	cbz	r1, 80052c6 <_reclaim_reent+0x36>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f9cf 	bl	8005664 <_free_r>
 80052c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052c8:	b111      	cbz	r1, 80052d0 <_reclaim_reent+0x40>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f9ca 	bl	8005664 <_free_r>
 80052d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80052d2:	b111      	cbz	r1, 80052da <_reclaim_reent+0x4a>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 f9c5 	bl	8005664 <_free_r>
 80052da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80052dc:	b111      	cbz	r1, 80052e4 <_reclaim_reent+0x54>
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 f9c0 	bl	8005664 <_free_r>
 80052e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052e6:	b111      	cbz	r1, 80052ee <_reclaim_reent+0x5e>
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f9bb 	bl	8005664 <_free_r>
 80052ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052f0:	b111      	cbz	r1, 80052f8 <_reclaim_reent+0x68>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f9b6 	bl	8005664 <_free_r>
 80052f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fa:	b111      	cbz	r1, 8005302 <_reclaim_reent+0x72>
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 f9b1 	bl	8005664 <_free_r>
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	b1e3      	cbz	r3, 8005340 <_reclaim_reent+0xb0>
 8005306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005308:	4620      	mov	r0, r4
 800530a:	4798      	blx	r3
 800530c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800530e:	b1b9      	cbz	r1, 8005340 <_reclaim_reent+0xb0>
 8005310:	4620      	mov	r0, r4
 8005312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005316:	f7ff bfad 	b.w	8005274 <cleanup_glue>
 800531a:	5949      	ldr	r1, [r1, r5]
 800531c:	b941      	cbnz	r1, 8005330 <_reclaim_reent+0xa0>
 800531e:	3504      	adds	r5, #4
 8005320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005322:	2d80      	cmp	r5, #128	; 0x80
 8005324:	68d9      	ldr	r1, [r3, #12]
 8005326:	d1f8      	bne.n	800531a <_reclaim_reent+0x8a>
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f99b 	bl	8005664 <_free_r>
 800532e:	e7ba      	b.n	80052a6 <_reclaim_reent+0x16>
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	f000 f996 	bl	8005664 <_free_r>
 8005338:	4631      	mov	r1, r6
 800533a:	e7ef      	b.n	800531c <_reclaim_reent+0x8c>
 800533c:	2500      	movs	r5, #0
 800533e:	e7ef      	b.n	8005320 <_reclaim_reent+0x90>
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	bf00      	nop
 8005344:	20000010 	.word	0x20000010

08005348 <_sbrk_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d06      	ldr	r5, [pc, #24]	; (8005364 <_sbrk_r+0x1c>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fb fd38 	bl	8000dc8 <_sbrk>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_sbrk_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_sbrk_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	20004b2c 	.word	0x20004b2c

08005368 <__sread>:
 8005368:	b510      	push	{r4, lr}
 800536a:	460c      	mov	r4, r1
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	f000 fcb6 	bl	8005ce0 <_read_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	bfab      	itete	ge
 8005378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800537a:	89a3      	ldrhlt	r3, [r4, #12]
 800537c:	181b      	addge	r3, r3, r0
 800537e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005382:	bfac      	ite	ge
 8005384:	6563      	strge	r3, [r4, #84]	; 0x54
 8005386:	81a3      	strhlt	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__swrite>:
 800538a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	461f      	mov	r7, r3
 8005390:	898b      	ldrh	r3, [r1, #12]
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	4605      	mov	r5, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4616      	mov	r6, r2
 800539a:	d505      	bpl.n	80053a8 <__swrite+0x1e>
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	2302      	movs	r3, #2
 80053a2:	2200      	movs	r2, #0
 80053a4:	f000 f938 	bl	8005618 <_lseek_r>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	4628      	mov	r0, r5
 80053ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	f000 b817 	b.w	80053f0 <_write_r>

080053c2 <__sseek>:
 80053c2:	b510      	push	{r4, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 f925 	bl	8005618 <_lseek_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	bf15      	itete	ne
 80053d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053de:	81a3      	strheq	r3, [r4, #12]
 80053e0:	bf18      	it	ne
 80053e2:	81a3      	strhne	r3, [r4, #12]
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <__sclose>:
 80053e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ea:	f000 b831 	b.w	8005450 <_close_r>
	...

080053f0 <_write_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d07      	ldr	r5, [pc, #28]	; (8005410 <_write_r+0x20>)
 80053f4:	4604      	mov	r4, r0
 80053f6:	4608      	mov	r0, r1
 80053f8:	4611      	mov	r1, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	602a      	str	r2, [r5, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f7fb fc91 	bl	8000d26 <_write>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_write_r+0x1e>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_write_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20004b2c 	.word	0x20004b2c

08005414 <__assert_func>:
 8005414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005416:	4614      	mov	r4, r2
 8005418:	461a      	mov	r2, r3
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <__assert_func+0x2c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4605      	mov	r5, r0
 8005420:	68d8      	ldr	r0, [r3, #12]
 8005422:	b14c      	cbz	r4, 8005438 <__assert_func+0x24>
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <__assert_func+0x30>)
 8005426:	9100      	str	r1, [sp, #0]
 8005428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <__assert_func+0x34>)
 800542e:	462b      	mov	r3, r5
 8005430:	f000 f8e0 	bl	80055f4 <fiprintf>
 8005434:	f000 fd26 	bl	8005e84 <abort>
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__assert_func+0x38>)
 800543a:	461c      	mov	r4, r3
 800543c:	e7f3      	b.n	8005426 <__assert_func+0x12>
 800543e:	bf00      	nop
 8005440:	20000010 	.word	0x20000010
 8005444:	0800618a 	.word	0x0800618a
 8005448:	08006197 	.word	0x08006197
 800544c:	080061c5 	.word	0x080061c5

08005450 <_close_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	; (800546c <_close_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb fc7f 	bl	8000d5e <_close>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_close_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_close_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20004b2c 	.word	0x20004b2c

08005470 <__sflush_r>:
 8005470:	898a      	ldrh	r2, [r1, #12]
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	4605      	mov	r5, r0
 8005478:	0710      	lsls	r0, r2, #28
 800547a:	460c      	mov	r4, r1
 800547c:	d458      	bmi.n	8005530 <__sflush_r+0xc0>
 800547e:	684b      	ldr	r3, [r1, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	dc05      	bgt.n	8005490 <__sflush_r+0x20>
 8005484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	dc02      	bgt.n	8005490 <__sflush_r+0x20>
 800548a:	2000      	movs	r0, #0
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005492:	2e00      	cmp	r6, #0
 8005494:	d0f9      	beq.n	800548a <__sflush_r+0x1a>
 8005496:	2300      	movs	r3, #0
 8005498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800549c:	682f      	ldr	r7, [r5, #0]
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	d032      	beq.n	8005508 <__sflush_r+0x98>
 80054a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	075a      	lsls	r2, r3, #29
 80054a8:	d505      	bpl.n	80054b6 <__sflush_r+0x46>
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	1ac0      	subs	r0, r0, r3
 80054ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054b0:	b10b      	cbz	r3, 80054b6 <__sflush_r+0x46>
 80054b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054b4:	1ac0      	subs	r0, r0, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	4602      	mov	r2, r0
 80054ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054bc:	6a21      	ldr	r1, [r4, #32]
 80054be:	4628      	mov	r0, r5
 80054c0:	47b0      	blx	r6
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	d106      	bne.n	80054d6 <__sflush_r+0x66>
 80054c8:	6829      	ldr	r1, [r5, #0]
 80054ca:	291d      	cmp	r1, #29
 80054cc:	d82c      	bhi.n	8005528 <__sflush_r+0xb8>
 80054ce:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <__sflush_r+0x108>)
 80054d0:	40ca      	lsrs	r2, r1
 80054d2:	07d6      	lsls	r6, r2, #31
 80054d4:	d528      	bpl.n	8005528 <__sflush_r+0xb8>
 80054d6:	2200      	movs	r2, #0
 80054d8:	6062      	str	r2, [r4, #4]
 80054da:	04d9      	lsls	r1, r3, #19
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	d504      	bpl.n	80054ec <__sflush_r+0x7c>
 80054e2:	1c42      	adds	r2, r0, #1
 80054e4:	d101      	bne.n	80054ea <__sflush_r+0x7a>
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	b903      	cbnz	r3, 80054ec <__sflush_r+0x7c>
 80054ea:	6560      	str	r0, [r4, #84]	; 0x54
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	602f      	str	r7, [r5, #0]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d0ca      	beq.n	800548a <__sflush_r+0x1a>
 80054f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054f8:	4299      	cmp	r1, r3
 80054fa:	d002      	beq.n	8005502 <__sflush_r+0x92>
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f8b1 	bl	8005664 <_free_r>
 8005502:	2000      	movs	r0, #0
 8005504:	6360      	str	r0, [r4, #52]	; 0x34
 8005506:	e7c1      	b.n	800548c <__sflush_r+0x1c>
 8005508:	6a21      	ldr	r1, [r4, #32]
 800550a:	2301      	movs	r3, #1
 800550c:	4628      	mov	r0, r5
 800550e:	47b0      	blx	r6
 8005510:	1c41      	adds	r1, r0, #1
 8005512:	d1c7      	bne.n	80054a4 <__sflush_r+0x34>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0c4      	beq.n	80054a4 <__sflush_r+0x34>
 800551a:	2b1d      	cmp	r3, #29
 800551c:	d001      	beq.n	8005522 <__sflush_r+0xb2>
 800551e:	2b16      	cmp	r3, #22
 8005520:	d101      	bne.n	8005526 <__sflush_r+0xb6>
 8005522:	602f      	str	r7, [r5, #0]
 8005524:	e7b1      	b.n	800548a <__sflush_r+0x1a>
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	e7ad      	b.n	800548c <__sflush_r+0x1c>
 8005530:	690f      	ldr	r7, [r1, #16]
 8005532:	2f00      	cmp	r7, #0
 8005534:	d0a9      	beq.n	800548a <__sflush_r+0x1a>
 8005536:	0793      	lsls	r3, r2, #30
 8005538:	680e      	ldr	r6, [r1, #0]
 800553a:	bf08      	it	eq
 800553c:	694b      	ldreq	r3, [r1, #20]
 800553e:	600f      	str	r7, [r1, #0]
 8005540:	bf18      	it	ne
 8005542:	2300      	movne	r3, #0
 8005544:	eba6 0807 	sub.w	r8, r6, r7
 8005548:	608b      	str	r3, [r1, #8]
 800554a:	f1b8 0f00 	cmp.w	r8, #0
 800554e:	dd9c      	ble.n	800548a <__sflush_r+0x1a>
 8005550:	6a21      	ldr	r1, [r4, #32]
 8005552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005554:	4643      	mov	r3, r8
 8005556:	463a      	mov	r2, r7
 8005558:	4628      	mov	r0, r5
 800555a:	47b0      	blx	r6
 800555c:	2800      	cmp	r0, #0
 800555e:	dc06      	bgt.n	800556e <__sflush_r+0xfe>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e78e      	b.n	800548c <__sflush_r+0x1c>
 800556e:	4407      	add	r7, r0
 8005570:	eba8 0800 	sub.w	r8, r8, r0
 8005574:	e7e9      	b.n	800554a <__sflush_r+0xda>
 8005576:	bf00      	nop
 8005578:	20400001 	.word	0x20400001

0800557c <_fflush_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	4605      	mov	r5, r0
 8005582:	460c      	mov	r4, r1
 8005584:	b913      	cbnz	r3, 800558c <_fflush_r+0x10>
 8005586:	2500      	movs	r5, #0
 8005588:	4628      	mov	r0, r5
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	b118      	cbz	r0, 8005596 <_fflush_r+0x1a>
 800558e:	6983      	ldr	r3, [r0, #24]
 8005590:	b90b      	cbnz	r3, 8005596 <_fflush_r+0x1a>
 8005592:	f7ff fcf9 	bl	8004f88 <__sinit>
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <_fflush_r+0x6c>)
 8005598:	429c      	cmp	r4, r3
 800559a:	d11b      	bne.n	80055d4 <_fflush_r+0x58>
 800559c:	686c      	ldr	r4, [r5, #4]
 800559e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <_fflush_r+0xa>
 80055a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d404      	bmi.n	80055b6 <_fflush_r+0x3a>
 80055ac:	0599      	lsls	r1, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_fflush_r+0x3a>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f7ff fdac 	bl	800510e <__retarget_lock_acquire_recursive>
 80055b6:	4628      	mov	r0, r5
 80055b8:	4621      	mov	r1, r4
 80055ba:	f7ff ff59 	bl	8005470 <__sflush_r>
 80055be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c0:	07da      	lsls	r2, r3, #31
 80055c2:	4605      	mov	r5, r0
 80055c4:	d4e0      	bmi.n	8005588 <_fflush_r+0xc>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	059b      	lsls	r3, r3, #22
 80055ca:	d4dd      	bmi.n	8005588 <_fflush_r+0xc>
 80055cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ce:	f7ff fd9f 	bl	8005110 <__retarget_lock_release_recursive>
 80055d2:	e7d9      	b.n	8005588 <_fflush_r+0xc>
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <_fflush_r+0x70>)
 80055d6:	429c      	cmp	r4, r3
 80055d8:	d101      	bne.n	80055de <_fflush_r+0x62>
 80055da:	68ac      	ldr	r4, [r5, #8]
 80055dc:	e7df      	b.n	800559e <_fflush_r+0x22>
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <_fflush_r+0x74>)
 80055e0:	429c      	cmp	r4, r3
 80055e2:	bf08      	it	eq
 80055e4:	68ec      	ldreq	r4, [r5, #12]
 80055e6:	e7da      	b.n	800559e <_fflush_r+0x22>
 80055e8:	080060d0 	.word	0x080060d0
 80055ec:	080060f0 	.word	0x080060f0
 80055f0:	080060b0 	.word	0x080060b0

080055f4 <fiprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b503      	push	{r0, r1, lr}
 80055f8:	4601      	mov	r1, r0
 80055fa:	ab03      	add	r3, sp, #12
 80055fc:	4805      	ldr	r0, [pc, #20]	; (8005614 <fiprintf+0x20>)
 80055fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005602:	6800      	ldr	r0, [r0, #0]
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f000 f8a7 	bl	8005758 <_vfiprintf_r>
 800560a:	b002      	add	sp, #8
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	b003      	add	sp, #12
 8005612:	4770      	bx	lr
 8005614:	20000010 	.word	0x20000010

08005618 <_lseek_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	; (8005638 <_lseek_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb fbc0 	bl	8000dac <_lseek>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_lseek_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_lseek_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20004b2c 	.word	0x20004b2c

0800563c <malloc>:
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <malloc+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7ff bd7d 	b.w	8005140 <_malloc_r>
 8005646:	bf00      	nop
 8005648:	20000010 	.word	0x20000010

0800564c <__malloc_lock>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__malloc_lock+0x8>)
 800564e:	f7ff bd5e 	b.w	800510e <__retarget_lock_acquire_recursive>
 8005652:	bf00      	nop
 8005654:	20004b24 	.word	0x20004b24

08005658 <__malloc_unlock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_unlock+0x8>)
 800565a:	f7ff bd59 	b.w	8005110 <__retarget_lock_release_recursive>
 800565e:	bf00      	nop
 8005660:	20004b24 	.word	0x20004b24

08005664 <_free_r>:
 8005664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005666:	2900      	cmp	r1, #0
 8005668:	d048      	beq.n	80056fc <_free_r+0x98>
 800566a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800566e:	9001      	str	r0, [sp, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f1a1 0404 	sub.w	r4, r1, #4
 8005676:	bfb8      	it	lt
 8005678:	18e4      	addlt	r4, r4, r3
 800567a:	f7ff ffe7 	bl	800564c <__malloc_lock>
 800567e:	4a20      	ldr	r2, [pc, #128]	; (8005700 <_free_r+0x9c>)
 8005680:	9801      	ldr	r0, [sp, #4]
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	4615      	mov	r5, r2
 8005686:	b933      	cbnz	r3, 8005696 <_free_r+0x32>
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	6014      	str	r4, [r2, #0]
 800568c:	b003      	add	sp, #12
 800568e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005692:	f7ff bfe1 	b.w	8005658 <__malloc_unlock>
 8005696:	42a3      	cmp	r3, r4
 8005698:	d90b      	bls.n	80056b2 <_free_r+0x4e>
 800569a:	6821      	ldr	r1, [r4, #0]
 800569c:	1862      	adds	r2, r4, r1
 800569e:	4293      	cmp	r3, r2
 80056a0:	bf04      	itt	eq
 80056a2:	681a      	ldreq	r2, [r3, #0]
 80056a4:	685b      	ldreq	r3, [r3, #4]
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	bf04      	itt	eq
 80056aa:	1852      	addeq	r2, r2, r1
 80056ac:	6022      	streq	r2, [r4, #0]
 80056ae:	602c      	str	r4, [r5, #0]
 80056b0:	e7ec      	b.n	800568c <_free_r+0x28>
 80056b2:	461a      	mov	r2, r3
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	b10b      	cbz	r3, 80056bc <_free_r+0x58>
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d9fa      	bls.n	80056b2 <_free_r+0x4e>
 80056bc:	6811      	ldr	r1, [r2, #0]
 80056be:	1855      	adds	r5, r2, r1
 80056c0:	42a5      	cmp	r5, r4
 80056c2:	d10b      	bne.n	80056dc <_free_r+0x78>
 80056c4:	6824      	ldr	r4, [r4, #0]
 80056c6:	4421      	add	r1, r4
 80056c8:	1854      	adds	r4, r2, r1
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	d1dd      	bne.n	800568c <_free_r+0x28>
 80056d0:	681c      	ldr	r4, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	6053      	str	r3, [r2, #4]
 80056d6:	4421      	add	r1, r4
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	e7d7      	b.n	800568c <_free_r+0x28>
 80056dc:	d902      	bls.n	80056e4 <_free_r+0x80>
 80056de:	230c      	movs	r3, #12
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	e7d3      	b.n	800568c <_free_r+0x28>
 80056e4:	6825      	ldr	r5, [r4, #0]
 80056e6:	1961      	adds	r1, r4, r5
 80056e8:	428b      	cmp	r3, r1
 80056ea:	bf04      	itt	eq
 80056ec:	6819      	ldreq	r1, [r3, #0]
 80056ee:	685b      	ldreq	r3, [r3, #4]
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	bf04      	itt	eq
 80056f4:	1949      	addeq	r1, r1, r5
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	6054      	str	r4, [r2, #4]
 80056fa:	e7c7      	b.n	800568c <_free_r+0x28>
 80056fc:	b003      	add	sp, #12
 80056fe:	bd30      	pop	{r4, r5, pc}
 8005700:	20004a6c 	.word	0x20004a6c

08005704 <__sfputc_r>:
 8005704:	6893      	ldr	r3, [r2, #8]
 8005706:	3b01      	subs	r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	b410      	push	{r4}
 800570c:	6093      	str	r3, [r2, #8]
 800570e:	da08      	bge.n	8005722 <__sfputc_r+0x1e>
 8005710:	6994      	ldr	r4, [r2, #24]
 8005712:	42a3      	cmp	r3, r4
 8005714:	db01      	blt.n	800571a <__sfputc_r+0x16>
 8005716:	290a      	cmp	r1, #10
 8005718:	d103      	bne.n	8005722 <__sfputc_r+0x1e>
 800571a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571e:	f000 baf1 	b.w	8005d04 <__swbuf_r>
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	1c58      	adds	r0, r3, #1
 8005726:	6010      	str	r0, [r2, #0]
 8005728:	7019      	strb	r1, [r3, #0]
 800572a:	4608      	mov	r0, r1
 800572c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005730:	4770      	bx	lr

08005732 <__sfputs_r>:
 8005732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	4614      	mov	r4, r2
 800573a:	18d5      	adds	r5, r2, r3
 800573c:	42ac      	cmp	r4, r5
 800573e:	d101      	bne.n	8005744 <__sfputs_r+0x12>
 8005740:	2000      	movs	r0, #0
 8005742:	e007      	b.n	8005754 <__sfputs_r+0x22>
 8005744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005748:	463a      	mov	r2, r7
 800574a:	4630      	mov	r0, r6
 800574c:	f7ff ffda 	bl	8005704 <__sfputc_r>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d1f3      	bne.n	800573c <__sfputs_r+0xa>
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005758 <_vfiprintf_r>:
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	460d      	mov	r5, r1
 800575e:	b09d      	sub	sp, #116	; 0x74
 8005760:	4614      	mov	r4, r2
 8005762:	4698      	mov	r8, r3
 8005764:	4606      	mov	r6, r0
 8005766:	b118      	cbz	r0, 8005770 <_vfiprintf_r+0x18>
 8005768:	6983      	ldr	r3, [r0, #24]
 800576a:	b90b      	cbnz	r3, 8005770 <_vfiprintf_r+0x18>
 800576c:	f7ff fc0c 	bl	8004f88 <__sinit>
 8005770:	4b89      	ldr	r3, [pc, #548]	; (8005998 <_vfiprintf_r+0x240>)
 8005772:	429d      	cmp	r5, r3
 8005774:	d11b      	bne.n	80057ae <_vfiprintf_r+0x56>
 8005776:	6875      	ldr	r5, [r6, #4]
 8005778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	d405      	bmi.n	800578a <_vfiprintf_r+0x32>
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	059a      	lsls	r2, r3, #22
 8005782:	d402      	bmi.n	800578a <_vfiprintf_r+0x32>
 8005784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005786:	f7ff fcc2 	bl	800510e <__retarget_lock_acquire_recursive>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	071b      	lsls	r3, r3, #28
 800578e:	d501      	bpl.n	8005794 <_vfiprintf_r+0x3c>
 8005790:	692b      	ldr	r3, [r5, #16]
 8005792:	b9eb      	cbnz	r3, 80057d0 <_vfiprintf_r+0x78>
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f000 fb06 	bl	8005da8 <__swsetup_r>
 800579c:	b1c0      	cbz	r0, 80057d0 <_vfiprintf_r+0x78>
 800579e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a0:	07dc      	lsls	r4, r3, #31
 80057a2:	d50e      	bpl.n	80057c2 <_vfiprintf_r+0x6a>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	b01d      	add	sp, #116	; 0x74
 80057aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ae:	4b7b      	ldr	r3, [pc, #492]	; (800599c <_vfiprintf_r+0x244>)
 80057b0:	429d      	cmp	r5, r3
 80057b2:	d101      	bne.n	80057b8 <_vfiprintf_r+0x60>
 80057b4:	68b5      	ldr	r5, [r6, #8]
 80057b6:	e7df      	b.n	8005778 <_vfiprintf_r+0x20>
 80057b8:	4b79      	ldr	r3, [pc, #484]	; (80059a0 <_vfiprintf_r+0x248>)
 80057ba:	429d      	cmp	r5, r3
 80057bc:	bf08      	it	eq
 80057be:	68f5      	ldreq	r5, [r6, #12]
 80057c0:	e7da      	b.n	8005778 <_vfiprintf_r+0x20>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	0598      	lsls	r0, r3, #22
 80057c6:	d4ed      	bmi.n	80057a4 <_vfiprintf_r+0x4c>
 80057c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ca:	f7ff fca1 	bl	8005110 <__retarget_lock_release_recursive>
 80057ce:	e7e9      	b.n	80057a4 <_vfiprintf_r+0x4c>
 80057d0:	2300      	movs	r3, #0
 80057d2:	9309      	str	r3, [sp, #36]	; 0x24
 80057d4:	2320      	movs	r3, #32
 80057d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057da:	f8cd 800c 	str.w	r8, [sp, #12]
 80057de:	2330      	movs	r3, #48	; 0x30
 80057e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059a4 <_vfiprintf_r+0x24c>
 80057e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e8:	f04f 0901 	mov.w	r9, #1
 80057ec:	4623      	mov	r3, r4
 80057ee:	469a      	mov	sl, r3
 80057f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f4:	b10a      	cbz	r2, 80057fa <_vfiprintf_r+0xa2>
 80057f6:	2a25      	cmp	r2, #37	; 0x25
 80057f8:	d1f9      	bne.n	80057ee <_vfiprintf_r+0x96>
 80057fa:	ebba 0b04 	subs.w	fp, sl, r4
 80057fe:	d00b      	beq.n	8005818 <_vfiprintf_r+0xc0>
 8005800:	465b      	mov	r3, fp
 8005802:	4622      	mov	r2, r4
 8005804:	4629      	mov	r1, r5
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ff93 	bl	8005732 <__sfputs_r>
 800580c:	3001      	adds	r0, #1
 800580e:	f000 80aa 	beq.w	8005966 <_vfiprintf_r+0x20e>
 8005812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005814:	445a      	add	r2, fp
 8005816:	9209      	str	r2, [sp, #36]	; 0x24
 8005818:	f89a 3000 	ldrb.w	r3, [sl]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a2 	beq.w	8005966 <_vfiprintf_r+0x20e>
 8005822:	2300      	movs	r3, #0
 8005824:	f04f 32ff 	mov.w	r2, #4294967295
 8005828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800582c:	f10a 0a01 	add.w	sl, sl, #1
 8005830:	9304      	str	r3, [sp, #16]
 8005832:	9307      	str	r3, [sp, #28]
 8005834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005838:	931a      	str	r3, [sp, #104]	; 0x68
 800583a:	4654      	mov	r4, sl
 800583c:	2205      	movs	r2, #5
 800583e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005842:	4858      	ldr	r0, [pc, #352]	; (80059a4 <_vfiprintf_r+0x24c>)
 8005844:	f7fa fcc4 	bl	80001d0 <memchr>
 8005848:	9a04      	ldr	r2, [sp, #16]
 800584a:	b9d8      	cbnz	r0, 8005884 <_vfiprintf_r+0x12c>
 800584c:	06d1      	lsls	r1, r2, #27
 800584e:	bf44      	itt	mi
 8005850:	2320      	movmi	r3, #32
 8005852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005856:	0713      	lsls	r3, r2, #28
 8005858:	bf44      	itt	mi
 800585a:	232b      	movmi	r3, #43	; 0x2b
 800585c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005860:	f89a 3000 	ldrb.w	r3, [sl]
 8005864:	2b2a      	cmp	r3, #42	; 0x2a
 8005866:	d015      	beq.n	8005894 <_vfiprintf_r+0x13c>
 8005868:	9a07      	ldr	r2, [sp, #28]
 800586a:	4654      	mov	r4, sl
 800586c:	2000      	movs	r0, #0
 800586e:	f04f 0c0a 	mov.w	ip, #10
 8005872:	4621      	mov	r1, r4
 8005874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005878:	3b30      	subs	r3, #48	; 0x30
 800587a:	2b09      	cmp	r3, #9
 800587c:	d94e      	bls.n	800591c <_vfiprintf_r+0x1c4>
 800587e:	b1b0      	cbz	r0, 80058ae <_vfiprintf_r+0x156>
 8005880:	9207      	str	r2, [sp, #28]
 8005882:	e014      	b.n	80058ae <_vfiprintf_r+0x156>
 8005884:	eba0 0308 	sub.w	r3, r0, r8
 8005888:	fa09 f303 	lsl.w	r3, r9, r3
 800588c:	4313      	orrs	r3, r2
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	46a2      	mov	sl, r4
 8005892:	e7d2      	b.n	800583a <_vfiprintf_r+0xe2>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	1d19      	adds	r1, r3, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	9103      	str	r1, [sp, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	bfbb      	ittet	lt
 80058a0:	425b      	neglt	r3, r3
 80058a2:	f042 0202 	orrlt.w	r2, r2, #2
 80058a6:	9307      	strge	r3, [sp, #28]
 80058a8:	9307      	strlt	r3, [sp, #28]
 80058aa:	bfb8      	it	lt
 80058ac:	9204      	strlt	r2, [sp, #16]
 80058ae:	7823      	ldrb	r3, [r4, #0]
 80058b0:	2b2e      	cmp	r3, #46	; 0x2e
 80058b2:	d10c      	bne.n	80058ce <_vfiprintf_r+0x176>
 80058b4:	7863      	ldrb	r3, [r4, #1]
 80058b6:	2b2a      	cmp	r3, #42	; 0x2a
 80058b8:	d135      	bne.n	8005926 <_vfiprintf_r+0x1ce>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d1a      	adds	r2, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9203      	str	r2, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfb8      	it	lt
 80058c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ca:	3402      	adds	r4, #2
 80058cc:	9305      	str	r3, [sp, #20]
 80058ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059b4 <_vfiprintf_r+0x25c>
 80058d2:	7821      	ldrb	r1, [r4, #0]
 80058d4:	2203      	movs	r2, #3
 80058d6:	4650      	mov	r0, sl
 80058d8:	f7fa fc7a 	bl	80001d0 <memchr>
 80058dc:	b140      	cbz	r0, 80058f0 <_vfiprintf_r+0x198>
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	eba0 000a 	sub.w	r0, r0, sl
 80058e4:	fa03 f000 	lsl.w	r0, r3, r0
 80058e8:	9b04      	ldr	r3, [sp, #16]
 80058ea:	4303      	orrs	r3, r0
 80058ec:	3401      	adds	r4, #1
 80058ee:	9304      	str	r3, [sp, #16]
 80058f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f4:	482c      	ldr	r0, [pc, #176]	; (80059a8 <_vfiprintf_r+0x250>)
 80058f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058fa:	2206      	movs	r2, #6
 80058fc:	f7fa fc68 	bl	80001d0 <memchr>
 8005900:	2800      	cmp	r0, #0
 8005902:	d03f      	beq.n	8005984 <_vfiprintf_r+0x22c>
 8005904:	4b29      	ldr	r3, [pc, #164]	; (80059ac <_vfiprintf_r+0x254>)
 8005906:	bb1b      	cbnz	r3, 8005950 <_vfiprintf_r+0x1f8>
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	3307      	adds	r3, #7
 800590c:	f023 0307 	bic.w	r3, r3, #7
 8005910:	3308      	adds	r3, #8
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005916:	443b      	add	r3, r7
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	e767      	b.n	80057ec <_vfiprintf_r+0x94>
 800591c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005920:	460c      	mov	r4, r1
 8005922:	2001      	movs	r0, #1
 8005924:	e7a5      	b.n	8005872 <_vfiprintf_r+0x11a>
 8005926:	2300      	movs	r3, #0
 8005928:	3401      	adds	r4, #1
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 0c0a 	mov.w	ip, #10
 8005932:	4620      	mov	r0, r4
 8005934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005938:	3a30      	subs	r2, #48	; 0x30
 800593a:	2a09      	cmp	r2, #9
 800593c:	d903      	bls.n	8005946 <_vfiprintf_r+0x1ee>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0c5      	beq.n	80058ce <_vfiprintf_r+0x176>
 8005942:	9105      	str	r1, [sp, #20]
 8005944:	e7c3      	b.n	80058ce <_vfiprintf_r+0x176>
 8005946:	fb0c 2101 	mla	r1, ip, r1, r2
 800594a:	4604      	mov	r4, r0
 800594c:	2301      	movs	r3, #1
 800594e:	e7f0      	b.n	8005932 <_vfiprintf_r+0x1da>
 8005950:	ab03      	add	r3, sp, #12
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	462a      	mov	r2, r5
 8005956:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <_vfiprintf_r+0x258>)
 8005958:	a904      	add	r1, sp, #16
 800595a:	4630      	mov	r0, r6
 800595c:	f3af 8000 	nop.w
 8005960:	4607      	mov	r7, r0
 8005962:	1c78      	adds	r0, r7, #1
 8005964:	d1d6      	bne.n	8005914 <_vfiprintf_r+0x1bc>
 8005966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005968:	07d9      	lsls	r1, r3, #31
 800596a:	d405      	bmi.n	8005978 <_vfiprintf_r+0x220>
 800596c:	89ab      	ldrh	r3, [r5, #12]
 800596e:	059a      	lsls	r2, r3, #22
 8005970:	d402      	bmi.n	8005978 <_vfiprintf_r+0x220>
 8005972:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005974:	f7ff fbcc 	bl	8005110 <__retarget_lock_release_recursive>
 8005978:	89ab      	ldrh	r3, [r5, #12]
 800597a:	065b      	lsls	r3, r3, #25
 800597c:	f53f af12 	bmi.w	80057a4 <_vfiprintf_r+0x4c>
 8005980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005982:	e711      	b.n	80057a8 <_vfiprintf_r+0x50>
 8005984:	ab03      	add	r3, sp, #12
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	462a      	mov	r2, r5
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <_vfiprintf_r+0x258>)
 800598c:	a904      	add	r1, sp, #16
 800598e:	4630      	mov	r0, r6
 8005990:	f000 f880 	bl	8005a94 <_printf_i>
 8005994:	e7e4      	b.n	8005960 <_vfiprintf_r+0x208>
 8005996:	bf00      	nop
 8005998:	080060d0 	.word	0x080060d0
 800599c:	080060f0 	.word	0x080060f0
 80059a0:	080060b0 	.word	0x080060b0
 80059a4:	080061c6 	.word	0x080061c6
 80059a8:	080061d0 	.word	0x080061d0
 80059ac:	00000000 	.word	0x00000000
 80059b0:	08005733 	.word	0x08005733
 80059b4:	080061cc 	.word	0x080061cc

080059b8 <_printf_common>:
 80059b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	4616      	mov	r6, r2
 80059be:	4699      	mov	r9, r3
 80059c0:	688a      	ldr	r2, [r1, #8]
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c8:	4293      	cmp	r3, r2
 80059ca:	bfb8      	it	lt
 80059cc:	4613      	movlt	r3, r2
 80059ce:	6033      	str	r3, [r6, #0]
 80059d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d4:	4607      	mov	r7, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	b10a      	cbz	r2, 80059de <_printf_common+0x26>
 80059da:	3301      	adds	r3, #1
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0699      	lsls	r1, r3, #26
 80059e2:	bf42      	ittt	mi
 80059e4:	6833      	ldrmi	r3, [r6, #0]
 80059e6:	3302      	addmi	r3, #2
 80059e8:	6033      	strmi	r3, [r6, #0]
 80059ea:	6825      	ldr	r5, [r4, #0]
 80059ec:	f015 0506 	ands.w	r5, r5, #6
 80059f0:	d106      	bne.n	8005a00 <_printf_common+0x48>
 80059f2:	f104 0a19 	add.w	sl, r4, #25
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	6832      	ldr	r2, [r6, #0]
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dc26      	bgt.n	8005a4e <_printf_common+0x96>
 8005a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a04:	1e13      	subs	r3, r2, #0
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	0692      	lsls	r2, r2, #26
 8005a0e:	d42b      	bmi.n	8005a68 <_printf_common+0xb0>
 8005a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a14:	4649      	mov	r1, r9
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d01e      	beq.n	8005a5c <_printf_common+0xa4>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	68e5      	ldr	r5, [r4, #12]
 8005a22:	6832      	ldr	r2, [r6, #0]
 8005a24:	f003 0306 	and.w	r3, r3, #6
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	bf08      	it	eq
 8005a2c:	1aad      	subeq	r5, r5, r2
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	bf0c      	ite	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	2500      	movne	r5, #0
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	bfc4      	itt	gt
 8005a3e:	1a9b      	subgt	r3, r3, r2
 8005a40:	18ed      	addgt	r5, r5, r3
 8005a42:	2600      	movs	r6, #0
 8005a44:	341a      	adds	r4, #26
 8005a46:	42b5      	cmp	r5, r6
 8005a48:	d11a      	bne.n	8005a80 <_printf_common+0xc8>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e008      	b.n	8005a60 <_printf_common+0xa8>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4652      	mov	r2, sl
 8005a52:	4649      	mov	r1, r9
 8005a54:	4638      	mov	r0, r7
 8005a56:	47c0      	blx	r8
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d103      	bne.n	8005a64 <_printf_common+0xac>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	3501      	adds	r5, #1
 8005a66:	e7c6      	b.n	80059f6 <_printf_common+0x3e>
 8005a68:	18e1      	adds	r1, r4, r3
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	2030      	movs	r0, #48	; 0x30
 8005a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a72:	4422      	add	r2, r4
 8005a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	e7c7      	b.n	8005a10 <_printf_common+0x58>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4622      	mov	r2, r4
 8005a84:	4649      	mov	r1, r9
 8005a86:	4638      	mov	r0, r7
 8005a88:	47c0      	blx	r8
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d0e6      	beq.n	8005a5c <_printf_common+0xa4>
 8005a8e:	3601      	adds	r6, #1
 8005a90:	e7d9      	b.n	8005a46 <_printf_common+0x8e>
	...

08005a94 <_printf_i>:
 8005a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	460c      	mov	r4, r1
 8005a9a:	4691      	mov	r9, r2
 8005a9c:	7e27      	ldrb	r7, [r4, #24]
 8005a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005aa0:	2f78      	cmp	r7, #120	; 0x78
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aaa:	d807      	bhi.n	8005abc <_printf_i+0x28>
 8005aac:	2f62      	cmp	r7, #98	; 0x62
 8005aae:	d80a      	bhi.n	8005ac6 <_printf_i+0x32>
 8005ab0:	2f00      	cmp	r7, #0
 8005ab2:	f000 80d8 	beq.w	8005c66 <_printf_i+0x1d2>
 8005ab6:	2f58      	cmp	r7, #88	; 0x58
 8005ab8:	f000 80a3 	beq.w	8005c02 <_printf_i+0x16e>
 8005abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ac4:	e03a      	b.n	8005b3c <_printf_i+0xa8>
 8005ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aca:	2b15      	cmp	r3, #21
 8005acc:	d8f6      	bhi.n	8005abc <_printf_i+0x28>
 8005ace:	a001      	add	r0, pc, #4	; (adr r0, 8005ad4 <_printf_i+0x40>)
 8005ad0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ad4:	08005b2d 	.word	0x08005b2d
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005abd 	.word	0x08005abd
 8005ae0:	08005abd 	.word	0x08005abd
 8005ae4:	08005abd 	.word	0x08005abd
 8005ae8:	08005abd 	.word	0x08005abd
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005abd 	.word	0x08005abd
 8005af4:	08005abd 	.word	0x08005abd
 8005af8:	08005abd 	.word	0x08005abd
 8005afc:	08005abd 	.word	0x08005abd
 8005b00:	08005c4d 	.word	0x08005c4d
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005c2f 	.word	0x08005c2f
 8005b0c:	08005abd 	.word	0x08005abd
 8005b10:	08005abd 	.word	0x08005abd
 8005b14:	08005c6f 	.word	0x08005c6f
 8005b18:	08005abd 	.word	0x08005abd
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005abd 	.word	0x08005abd
 8005b24:	08005abd 	.word	0x08005abd
 8005b28:	08005c37 	.word	0x08005c37
 8005b2c:	680b      	ldr	r3, [r1, #0]
 8005b2e:	1d1a      	adds	r2, r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	600a      	str	r2, [r1, #0]
 8005b34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0a3      	b.n	8005c88 <_printf_i+0x1f4>
 8005b40:	6825      	ldr	r5, [r4, #0]
 8005b42:	6808      	ldr	r0, [r1, #0]
 8005b44:	062e      	lsls	r6, r5, #24
 8005b46:	f100 0304 	add.w	r3, r0, #4
 8005b4a:	d50a      	bpl.n	8005b62 <_printf_i+0xce>
 8005b4c:	6805      	ldr	r5, [r0, #0]
 8005b4e:	600b      	str	r3, [r1, #0]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da03      	bge.n	8005b5c <_printf_i+0xc8>
 8005b54:	232d      	movs	r3, #45	; 0x2d
 8005b56:	426d      	negs	r5, r5
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5c:	485e      	ldr	r0, [pc, #376]	; (8005cd8 <_printf_i+0x244>)
 8005b5e:	230a      	movs	r3, #10
 8005b60:	e019      	b.n	8005b96 <_printf_i+0x102>
 8005b62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b66:	6805      	ldr	r5, [r0, #0]
 8005b68:	600b      	str	r3, [r1, #0]
 8005b6a:	bf18      	it	ne
 8005b6c:	b22d      	sxthne	r5, r5
 8005b6e:	e7ef      	b.n	8005b50 <_printf_i+0xbc>
 8005b70:	680b      	ldr	r3, [r1, #0]
 8005b72:	6825      	ldr	r5, [r4, #0]
 8005b74:	1d18      	adds	r0, r3, #4
 8005b76:	6008      	str	r0, [r1, #0]
 8005b78:	0628      	lsls	r0, r5, #24
 8005b7a:	d501      	bpl.n	8005b80 <_printf_i+0xec>
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	e002      	b.n	8005b86 <_printf_i+0xf2>
 8005b80:	0669      	lsls	r1, r5, #25
 8005b82:	d5fb      	bpl.n	8005b7c <_printf_i+0xe8>
 8005b84:	881d      	ldrh	r5, [r3, #0]
 8005b86:	4854      	ldr	r0, [pc, #336]	; (8005cd8 <_printf_i+0x244>)
 8005b88:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2308      	moveq	r3, #8
 8005b8e:	230a      	movne	r3, #10
 8005b90:	2100      	movs	r1, #0
 8005b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b96:	6866      	ldr	r6, [r4, #4]
 8005b98:	60a6      	str	r6, [r4, #8]
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	bfa2      	ittt	ge
 8005b9e:	6821      	ldrge	r1, [r4, #0]
 8005ba0:	f021 0104 	bicge.w	r1, r1, #4
 8005ba4:	6021      	strge	r1, [r4, #0]
 8005ba6:	b90d      	cbnz	r5, 8005bac <_printf_i+0x118>
 8005ba8:	2e00      	cmp	r6, #0
 8005baa:	d04d      	beq.n	8005c48 <_printf_i+0x1b4>
 8005bac:	4616      	mov	r6, r2
 8005bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005bb6:	5dc7      	ldrb	r7, [r0, r7]
 8005bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bbc:	462f      	mov	r7, r5
 8005bbe:	42bb      	cmp	r3, r7
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	d9f4      	bls.n	8005bae <_printf_i+0x11a>
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10b      	bne.n	8005be0 <_printf_i+0x14c>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	07df      	lsls	r7, r3, #31
 8005bcc:	d508      	bpl.n	8005be0 <_printf_i+0x14c>
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	6861      	ldr	r1, [r4, #4]
 8005bd2:	4299      	cmp	r1, r3
 8005bd4:	bfde      	ittt	le
 8005bd6:	2330      	movle	r3, #48	; 0x30
 8005bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005be0:	1b92      	subs	r2, r2, r6
 8005be2:	6122      	str	r2, [r4, #16]
 8005be4:	f8cd a000 	str.w	sl, [sp]
 8005be8:	464b      	mov	r3, r9
 8005bea:	aa03      	add	r2, sp, #12
 8005bec:	4621      	mov	r1, r4
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f7ff fee2 	bl	80059b8 <_printf_common>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d14c      	bne.n	8005c92 <_printf_i+0x1fe>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	b004      	add	sp, #16
 8005bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c02:	4835      	ldr	r0, [pc, #212]	; (8005cd8 <_printf_i+0x244>)
 8005c04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	680e      	ldr	r6, [r1, #0]
 8005c0c:	061f      	lsls	r7, r3, #24
 8005c0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c12:	600e      	str	r6, [r1, #0]
 8005c14:	d514      	bpl.n	8005c40 <_printf_i+0x1ac>
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	bf44      	itt	mi
 8005c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1e:	6023      	strmi	r3, [r4, #0]
 8005c20:	b91d      	cbnz	r5, 8005c2a <_printf_i+0x196>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	f023 0320 	bic.w	r3, r3, #32
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	2310      	movs	r3, #16
 8005c2c:	e7b0      	b.n	8005b90 <_printf_i+0xfc>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f043 0320 	orr.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2378      	movs	r3, #120	; 0x78
 8005c38:	4828      	ldr	r0, [pc, #160]	; (8005cdc <_printf_i+0x248>)
 8005c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c3e:	e7e3      	b.n	8005c08 <_printf_i+0x174>
 8005c40:	065e      	lsls	r6, r3, #25
 8005c42:	bf48      	it	mi
 8005c44:	b2ad      	uxthmi	r5, r5
 8005c46:	e7e6      	b.n	8005c16 <_printf_i+0x182>
 8005c48:	4616      	mov	r6, r2
 8005c4a:	e7bb      	b.n	8005bc4 <_printf_i+0x130>
 8005c4c:	680b      	ldr	r3, [r1, #0]
 8005c4e:	6826      	ldr	r6, [r4, #0]
 8005c50:	6960      	ldr	r0, [r4, #20]
 8005c52:	1d1d      	adds	r5, r3, #4
 8005c54:	600d      	str	r5, [r1, #0]
 8005c56:	0635      	lsls	r5, r6, #24
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0x1cc>
 8005c5c:	6018      	str	r0, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <_printf_i+0x1d2>
 8005c60:	0671      	lsls	r1, r6, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0x1c8>
 8005c64:	8018      	strh	r0, [r3, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	4616      	mov	r6, r2
 8005c6c:	e7ba      	b.n	8005be4 <_printf_i+0x150>
 8005c6e:	680b      	ldr	r3, [r1, #0]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	600a      	str	r2, [r1, #0]
 8005c74:	681e      	ldr	r6, [r3, #0]
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7fa faa8 	bl	80001d0 <memchr>
 8005c80:	b108      	cbz	r0, 8005c86 <_printf_i+0x1f2>
 8005c82:	1b80      	subs	r0, r0, r6
 8005c84:	6060      	str	r0, [r4, #4]
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c90:	e7a8      	b.n	8005be4 <_printf_i+0x150>
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	4632      	mov	r2, r6
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	47d0      	blx	sl
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d0ab      	beq.n	8005bf8 <_printf_i+0x164>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	079b      	lsls	r3, r3, #30
 8005ca4:	d413      	bmi.n	8005cce <_printf_i+0x23a>
 8005ca6:	68e0      	ldr	r0, [r4, #12]
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	4298      	cmp	r0, r3
 8005cac:	bfb8      	it	lt
 8005cae:	4618      	movlt	r0, r3
 8005cb0:	e7a4      	b.n	8005bfc <_printf_i+0x168>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	47d0      	blx	sl
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d09b      	beq.n	8005bf8 <_printf_i+0x164>
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	9903      	ldr	r1, [sp, #12]
 8005cc6:	1a5b      	subs	r3, r3, r1
 8005cc8:	42ab      	cmp	r3, r5
 8005cca:	dcf2      	bgt.n	8005cb2 <_printf_i+0x21e>
 8005ccc:	e7eb      	b.n	8005ca6 <_printf_i+0x212>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	f104 0619 	add.w	r6, r4, #25
 8005cd4:	e7f5      	b.n	8005cc2 <_printf_i+0x22e>
 8005cd6:	bf00      	nop
 8005cd8:	080061d7 	.word	0x080061d7
 8005cdc:	080061e8 	.word	0x080061e8

08005ce0 <_read_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d07      	ldr	r5, [pc, #28]	; (8005d00 <_read_r+0x20>)
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	4608      	mov	r0, r1
 8005ce8:	4611      	mov	r1, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f7fa fffc 	bl	8000cec <_read>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_read_r+0x1e>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_read_r+0x1e>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20004b2c 	.word	0x20004b2c

08005d04 <__swbuf_r>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	460e      	mov	r6, r1
 8005d08:	4614      	mov	r4, r2
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	b118      	cbz	r0, 8005d16 <__swbuf_r+0x12>
 8005d0e:	6983      	ldr	r3, [r0, #24]
 8005d10:	b90b      	cbnz	r3, 8005d16 <__swbuf_r+0x12>
 8005d12:	f7ff f939 	bl	8004f88 <__sinit>
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <__swbuf_r+0x98>)
 8005d18:	429c      	cmp	r4, r3
 8005d1a:	d12b      	bne.n	8005d74 <__swbuf_r+0x70>
 8005d1c:	686c      	ldr	r4, [r5, #4]
 8005d1e:	69a3      	ldr	r3, [r4, #24]
 8005d20:	60a3      	str	r3, [r4, #8]
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	071a      	lsls	r2, r3, #28
 8005d26:	d52f      	bpl.n	8005d88 <__swbuf_r+0x84>
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	b36b      	cbz	r3, 8005d88 <__swbuf_r+0x84>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	6820      	ldr	r0, [r4, #0]
 8005d30:	1ac0      	subs	r0, r0, r3
 8005d32:	6963      	ldr	r3, [r4, #20]
 8005d34:	b2f6      	uxtb	r6, r6
 8005d36:	4283      	cmp	r3, r0
 8005d38:	4637      	mov	r7, r6
 8005d3a:	dc04      	bgt.n	8005d46 <__swbuf_r+0x42>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7ff fc1c 	bl	800557c <_fflush_r>
 8005d44:	bb30      	cbnz	r0, 8005d94 <__swbuf_r+0x90>
 8005d46:	68a3      	ldr	r3, [r4, #8]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	60a3      	str	r3, [r4, #8]
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	701e      	strb	r6, [r3, #0]
 8005d54:	6963      	ldr	r3, [r4, #20]
 8005d56:	3001      	adds	r0, #1
 8005d58:	4283      	cmp	r3, r0
 8005d5a:	d004      	beq.n	8005d66 <__swbuf_r+0x62>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	07db      	lsls	r3, r3, #31
 8005d60:	d506      	bpl.n	8005d70 <__swbuf_r+0x6c>
 8005d62:	2e0a      	cmp	r6, #10
 8005d64:	d104      	bne.n	8005d70 <__swbuf_r+0x6c>
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff fc07 	bl	800557c <_fflush_r>
 8005d6e:	b988      	cbnz	r0, 8005d94 <__swbuf_r+0x90>
 8005d70:	4638      	mov	r0, r7
 8005d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <__swbuf_r+0x9c>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d101      	bne.n	8005d7e <__swbuf_r+0x7a>
 8005d7a:	68ac      	ldr	r4, [r5, #8]
 8005d7c:	e7cf      	b.n	8005d1e <__swbuf_r+0x1a>
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <__swbuf_r+0xa0>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	bf08      	it	eq
 8005d84:	68ec      	ldreq	r4, [r5, #12]
 8005d86:	e7ca      	b.n	8005d1e <__swbuf_r+0x1a>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f80c 	bl	8005da8 <__swsetup_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d0cb      	beq.n	8005d2c <__swbuf_r+0x28>
 8005d94:	f04f 37ff 	mov.w	r7, #4294967295
 8005d98:	e7ea      	b.n	8005d70 <__swbuf_r+0x6c>
 8005d9a:	bf00      	nop
 8005d9c:	080060d0 	.word	0x080060d0
 8005da0:	080060f0 	.word	0x080060f0
 8005da4:	080060b0 	.word	0x080060b0

08005da8 <__swsetup_r>:
 8005da8:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <__swsetup_r+0xcc>)
 8005daa:	b570      	push	{r4, r5, r6, lr}
 8005dac:	681d      	ldr	r5, [r3, #0]
 8005dae:	4606      	mov	r6, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	b125      	cbz	r5, 8005dbe <__swsetup_r+0x16>
 8005db4:	69ab      	ldr	r3, [r5, #24]
 8005db6:	b913      	cbnz	r3, 8005dbe <__swsetup_r+0x16>
 8005db8:	4628      	mov	r0, r5
 8005dba:	f7ff f8e5 	bl	8004f88 <__sinit>
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <__swsetup_r+0xd0>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d10f      	bne.n	8005de4 <__swsetup_r+0x3c>
 8005dc4:	686c      	ldr	r4, [r5, #4]
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dcc:	0719      	lsls	r1, r3, #28
 8005dce:	d42c      	bmi.n	8005e2a <__swsetup_r+0x82>
 8005dd0:	06dd      	lsls	r5, r3, #27
 8005dd2:	d411      	bmi.n	8005df8 <__swsetup_r+0x50>
 8005dd4:	2309      	movs	r3, #9
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	e03e      	b.n	8005e62 <__swsetup_r+0xba>
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <__swsetup_r+0xd4>)
 8005de6:	429c      	cmp	r4, r3
 8005de8:	d101      	bne.n	8005dee <__swsetup_r+0x46>
 8005dea:	68ac      	ldr	r4, [r5, #8]
 8005dec:	e7eb      	b.n	8005dc6 <__swsetup_r+0x1e>
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <__swsetup_r+0xd8>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	bf08      	it	eq
 8005df4:	68ec      	ldreq	r4, [r5, #12]
 8005df6:	e7e6      	b.n	8005dc6 <__swsetup_r+0x1e>
 8005df8:	0758      	lsls	r0, r3, #29
 8005dfa:	d512      	bpl.n	8005e22 <__swsetup_r+0x7a>
 8005dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfe:	b141      	cbz	r1, 8005e12 <__swsetup_r+0x6a>
 8005e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d002      	beq.n	8005e0e <__swsetup_r+0x66>
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fc2b 	bl	8005664 <_free_r>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6363      	str	r3, [r4, #52]	; 0x34
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f043 0308 	orr.w	r3, r3, #8
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	b94b      	cbnz	r3, 8005e42 <__swsetup_r+0x9a>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d003      	beq.n	8005e42 <__swsetup_r+0x9a>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f84d 	bl	8005edc <__smakebuf_r>
 8005e42:	89a0      	ldrh	r0, [r4, #12]
 8005e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e48:	f010 0301 	ands.w	r3, r0, #1
 8005e4c:	d00a      	beq.n	8005e64 <__swsetup_r+0xbc>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60a3      	str	r3, [r4, #8]
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	425b      	negs	r3, r3
 8005e56:	61a3      	str	r3, [r4, #24]
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	b943      	cbnz	r3, 8005e6e <__swsetup_r+0xc6>
 8005e5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e60:	d1ba      	bne.n	8005dd8 <__swsetup_r+0x30>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	0781      	lsls	r1, r0, #30
 8005e66:	bf58      	it	pl
 8005e68:	6963      	ldrpl	r3, [r4, #20]
 8005e6a:	60a3      	str	r3, [r4, #8]
 8005e6c:	e7f4      	b.n	8005e58 <__swsetup_r+0xb0>
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e7f7      	b.n	8005e62 <__swsetup_r+0xba>
 8005e72:	bf00      	nop
 8005e74:	20000010 	.word	0x20000010
 8005e78:	080060d0 	.word	0x080060d0
 8005e7c:	080060f0 	.word	0x080060f0
 8005e80:	080060b0 	.word	0x080060b0

08005e84 <abort>:
 8005e84:	b508      	push	{r3, lr}
 8005e86:	2006      	movs	r0, #6
 8005e88:	f000 f890 	bl	8005fac <raise>
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f7fa ff23 	bl	8000cd8 <_exit>

08005e92 <__swhatbuf_r>:
 8005e92:	b570      	push	{r4, r5, r6, lr}
 8005e94:	460e      	mov	r6, r1
 8005e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	b096      	sub	sp, #88	; 0x58
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	da07      	bge.n	8005eb4 <__swhatbuf_r+0x22>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	89b3      	ldrh	r3, [r6, #12]
 8005eaa:	061a      	lsls	r2, r3, #24
 8005eac:	d410      	bmi.n	8005ed0 <__swhatbuf_r+0x3e>
 8005eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb2:	e00e      	b.n	8005ed2 <__swhatbuf_r+0x40>
 8005eb4:	466a      	mov	r2, sp
 8005eb6:	f000 f895 	bl	8005fe4 <_fstat_r>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	dbf2      	blt.n	8005ea4 <__swhatbuf_r+0x12>
 8005ebe:	9a01      	ldr	r2, [sp, #4]
 8005ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ec8:	425a      	negs	r2, r3
 8005eca:	415a      	adcs	r2, r3
 8005ecc:	602a      	str	r2, [r5, #0]
 8005ece:	e7ee      	b.n	8005eae <__swhatbuf_r+0x1c>
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	b016      	add	sp, #88	; 0x58
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005edc <__smakebuf_r>:
 8005edc:	898b      	ldrh	r3, [r1, #12]
 8005ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee0:	079d      	lsls	r5, r3, #30
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	d507      	bpl.n	8005ef8 <__smakebuf_r+0x1c>
 8005ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	6163      	str	r3, [r4, #20]
 8005ef4:	b002      	add	sp, #8
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	ab01      	add	r3, sp, #4
 8005efa:	466a      	mov	r2, sp
 8005efc:	f7ff ffc9 	bl	8005e92 <__swhatbuf_r>
 8005f00:	9900      	ldr	r1, [sp, #0]
 8005f02:	4605      	mov	r5, r0
 8005f04:	4630      	mov	r0, r6
 8005f06:	f7ff f91b 	bl	8005140 <_malloc_r>
 8005f0a:	b948      	cbnz	r0, 8005f20 <__smakebuf_r+0x44>
 8005f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f10:	059a      	lsls	r2, r3, #22
 8005f12:	d4ef      	bmi.n	8005ef4 <__smakebuf_r+0x18>
 8005f14:	f023 0303 	bic.w	r3, r3, #3
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	e7e3      	b.n	8005ee8 <__smakebuf_r+0xc>
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <__smakebuf_r+0x7c>)
 8005f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	6020      	str	r0, [r4, #0]
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	9b00      	ldr	r3, [sp, #0]
 8005f30:	6163      	str	r3, [r4, #20]
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	6120      	str	r0, [r4, #16]
 8005f36:	b15b      	cbz	r3, 8005f50 <__smakebuf_r+0x74>
 8005f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f000 f863 	bl	8006008 <_isatty_r>
 8005f42:	b128      	cbz	r0, 8005f50 <__smakebuf_r+0x74>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	89a0      	ldrh	r0, [r4, #12]
 8005f52:	4305      	orrs	r5, r0
 8005f54:	81a5      	strh	r5, [r4, #12]
 8005f56:	e7cd      	b.n	8005ef4 <__smakebuf_r+0x18>
 8005f58:	08004f21 	.word	0x08004f21

08005f5c <_raise_r>:
 8005f5c:	291f      	cmp	r1, #31
 8005f5e:	b538      	push	{r3, r4, r5, lr}
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	d904      	bls.n	8005f70 <_raise_r+0x14>
 8005f66:	2316      	movs	r3, #22
 8005f68:	6003      	str	r3, [r0, #0]
 8005f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f72:	b112      	cbz	r2, 8005f7a <_raise_r+0x1e>
 8005f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f78:	b94b      	cbnz	r3, 8005f8e <_raise_r+0x32>
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f830 	bl	8005fe0 <_getpid_r>
 8005f80:	462a      	mov	r2, r5
 8005f82:	4601      	mov	r1, r0
 8005f84:	4620      	mov	r0, r4
 8005f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8a:	f000 b817 	b.w	8005fbc <_kill_r>
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d00a      	beq.n	8005fa8 <_raise_r+0x4c>
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	d103      	bne.n	8005f9e <_raise_r+0x42>
 8005f96:	2316      	movs	r3, #22
 8005f98:	6003      	str	r3, [r0, #0]
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	e7e7      	b.n	8005f6e <_raise_r+0x12>
 8005f9e:	2400      	movs	r4, #0
 8005fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	4798      	blx	r3
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e7e0      	b.n	8005f6e <_raise_r+0x12>

08005fac <raise>:
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <raise+0xc>)
 8005fae:	4601      	mov	r1, r0
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	f7ff bfd3 	b.w	8005f5c <_raise_r>
 8005fb6:	bf00      	nop
 8005fb8:	20000010 	.word	0x20000010

08005fbc <_kill_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	; (8005fdc <_kill_r+0x20>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	f7fa fe75 	bl	8000cb8 <_kill>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	d102      	bne.n	8005fd8 <_kill_r+0x1c>
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	b103      	cbz	r3, 8005fd8 <_kill_r+0x1c>
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	bf00      	nop
 8005fdc:	20004b2c 	.word	0x20004b2c

08005fe0 <_getpid_r>:
 8005fe0:	f7fa be62 	b.w	8000ca8 <_getpid>

08005fe4 <_fstat_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d07      	ldr	r5, [pc, #28]	; (8006004 <_fstat_r+0x20>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	f7fa fec0 	bl	8000d76 <_fstat>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d102      	bne.n	8006000 <_fstat_r+0x1c>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	b103      	cbz	r3, 8006000 <_fstat_r+0x1c>
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	20004b2c 	.word	0x20004b2c

08006008 <_isatty_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_isatty_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fa febf 	bl	8000d96 <_isatty>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_isatty_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_isatty_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20004b2c 	.word	0x20004b2c

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
